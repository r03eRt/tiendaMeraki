<?php
if ( ! defined( 'ABSPATH' ) ) exit ; class SEUR_connect { public $Estados ; public $Cod_situacion ; public $Tipo_via ; public $estados_entregado ; public function __construct() { $this->Create_Arrays() ; add_filter('cron_schedules', array($this, 'SEUR_custom_cron_schedule')) ; add_action( 'SEUR_init', array( $this, 'SEUR_crea_cron_actualiza_envios' )) ; add_action( 'SEUR_Actualiza_Envios', array( $this, 'SEUR_actualiza_envios' )) ; return $this ;  } function SEUR_custom_cron_schedule( $schedules ) { $schedules[ 'SEUR_5m' ] = array( 'interval' => 5 * MINUTE_IN_SECONDS, 'display' => __( 'Cada 5 minutos', 'xtend' ) ) ; return $schedules ;  } function SEUR_crea_cron_actualiza_envios() { if( false === ($On_time = wp_next_scheduled( 'SEUR_Actualiza_Envios' ))) { wp_schedule_event( time(), 'SEUR_5m' , 'SEUR_Actualiza_Envios') ;  }  } function SEUR_actualiza_envios() { try { if( $this->Estado()['ALL'] ) { $crono = SEUR()->API->New_Crono() ; $pedidos = SEUR()->API->getOrdersSEUR() ; $update_all['Cant_Pedidos'] = count($pedidos) ; $sincro = 0 ; foreach($pedidos as $pedido) { $key = 'SEG_PEDIDO_'. $pedido->ID ; if ( false === ( $dUp = SEUR()->API->getTransient( $key ) ) ) { $pedido->SEUR = get_metadata('post' , $pedido->ID , 'SEUR' , true ) ; $dUp['Registro'] = array() ; $dUp['check'] = false ; $Ant_Estado = '000' ; $dUp = $this->Busca_Envio($pedido, $dUp ) ; if( $dUp['check'] ) $sincro ++ ; SEUR()->API->setTransient( $key , $dUp, $this->NextSyncro() ) ;  }  } $update_all['Pedidos_sincronizados'] = $sincro ; $update_all['Hora'] = date('H:i:s Y-m-d', time()) ; $update_all['Tiempo_proceso'] = $crono->get( true, 4 ) ; } else { $avs = __('SEUR - ERROR ACTUALIZANDO ENVÍOS:, ','seur') . __( 'No se encuentra comunicación con SEUR.','seur') ; SEUR()->log($avs ) ; $update_all['ERROR_SYNCRO'] = $avs ;  } } catch (Exception $e) { SEUR()->log(__('SEUR - ERROR ACTUALIZANDO ENVÍOS:, ','seur') . $e->getTraceAsString()) ; $update_all['ERROR_SYNCRO'] = $e ;  } SEUR()->API->setTransient( 'EST_ACT' , $update_all, 6 * MINUTE_IN_SECONDS ) ;  } public function NextSyncro() { $CT = current_time( 'timestamp' ) ; $Hora_Act = (int)date('H', $CT) ; if(  $Hora_Act < 7 ) { $dUp['Registro'][] = 'Se pasa consulta a la mañana siguiente 9:00+-' ; return ( strtotime ( date('Y-m-d 8:55:s',  $CT)) - $CT) + mt_rand(0,600) ; } else if(  $Hora_Act > 22 || date('N') == 7 ) { $dUp['Registro'][] = 'Se pasa consulta a la mañana siguiente 9:00+-' ; return ( strtotime ( date('Y-m-d 8:55:s', strtotime ( '+1 day', $CT))) - $CT) + mt_rand(0,600) ; } else if( ( (date('N') == 6 && $Hora_Act > 14) ) ) { $dUp['Registro'][] = 'Se pasa consulta al lunes siguiente a las 9:00+-' ; return ( strtotime ( date('Y-m-d 8:55:s', strtotime ( '+2 day', $CT))) - $CT) + mt_rand(0,600) ; } else { return 6900 + mt_rand(0,600) ;  }  } public function Busca_Envio($pedido, $dUp ) { if ( $pedido->SEUR !== false && isset( $pedido->SEUR['EXPEDICION_ID'] ) ) { $dUp['Registro'][] = 'Buscando EXPEDICION_ID teniendo datos de SEUR.' ; if( ($dUp['check'] = $this->get_estado_envio_detallado( $pedido->SEUR['EXPEDICION_ID'] , $pedido->ID ))  !== false ) $dUp['Registro'][] = 'Recuperados datos de expedición detallada.' ; else
$dUp['Registro'][] = 'No se pudieron recuperar datos de expedición detallada.' ; return $dUp ; } else { $dUp['Registro'][] = 'Buscando EXPEDICION_ID sin tener datos de SEUR.' ; if( isset( $pedido->SEUR['EXPEDICION_NUM'] ) ) { $Exp_num = $pedido->SEUR['EXPEDICION_NUM'] ; $ref_envio ='' ; $dUp['Registro'][] = 'Recuperados datos de expedición por número de expedición dada manualmente :' . $Exp_num ; } else { $Exp_num = '' ; $ref_envio = $pedido->ID ; $dUp['Registro'][] = 'Recuperados datos de expedición por referencia del pedido: ' . $ref_envio ;  } for ( $count = 1; $count <= 8; $count ++ ) { try { $resp = $this->consultaListadoExpedicionesStr($Exp_num, $ref_envio) ; } catch (Exception $e) { SEUR()->log($e->getTraceAsString()) ; $dUp['check'] = false ; $dUp['Registro'][] = 'Error de comunicaciones con SEUR: ' . $e->getMessage() ; return $dUp ;  } if( isset($resp['@attributes']) && (int)$resp['@attributes']['NUM'] >= 0) { if( (int)$resp['@attributes']['NUM'] > 1 ) { $dUp['check'] = true ; $dUp['Registro'][] = 'Envio con varias expediciones, se coje la primera.' ; $Exp_check = reset($resp['EXPEDICION']) ; break ; } else if( (int)$resp['@attributes']['NUM'] == 1 ) { $dUp['check'] = true ; $Exp_check = $resp['EXPEDICION'] ; break ; } else { $dUp['check'] = false ; $dUp['Registro'][] = 'No se ha encontrado pedido.' ; $ref_envio .= '_' ; $dUp['Registro'][] = 'Se intenta buscar reenvío.' . $ref_envio ; continue ;  } } else { $dUp['check'] = false ; $dUp['Registro'][] = 'Ha habido algún error en el envío de datos a SEUR.' ; $dUp['Registro'][] = $resp ; return $dUp ;  }  } if ($dUp['check']) { $dUp['Registro'][] = 'Se ha encontrado envío, buscando EXPEDICION_ID' ; if( ( $dUp['check'] = $this->get_estado_envio_detallado( $Exp_check['EXPEDICION_ID'] , $pedido->ID) ) !== false) { $dUp['Registro'][] = 'Se ha encontrado EXPEDICION_ID = ' . $Exp_check['EXPEDICION_ID'] ; $dUp['Registro'][] = 'Recuperados datos de expedición detallada.' ; } else { $dUp['Registro'][] = 'No se ha podido recuperar EXPEDICION_ID, se guarda expedición normal.' ; $this->update_envio($pedido->ID, $Exp_check ) ;  } } else { $dUp['Registro'][] = 'No se ha podido recuperar ninguna información desde SEUR.' ;  } return $dUp ;  }  } public function get_estado_envio_detallado( $ID_Seg , $Id_Pedido ) { try { $xml = $this->ConsultaDetalleExpedicionesStr( $ID_Seg ) ; } catch (Exception $e) { SEUR()->log($e->getTraceAsString()) ; return  false ;  } $Exp_cont = (int)$xml['@attributes']['NUM'] ; if( $Exp_cont == 1 ) { $Exp = $xml['EXPEDICION'] ; } else if( $Exp_cont > 1 ) { $Exp = $xml['EXPEDICION'][0] ; } else { SEUR()->log(array('SEUR: get_estado_envio_detallado:', 'ID Seguimiento:' . $ID_Seg , 'Datos:',   $xml)) ; return  false ;  } $this->update_envio( $Id_Pedido  , $Exp ) ; return true ;  } public function update_envio( $order_id, $new_data, $act_estado = true ) { if ( FALSE === get_post_status( $order_id ) ) { return false ; } else { if($act_estado) { if( in_array( $this->cod_estado_envio( $new_data )  , $this->estados_entregado  ) ) { do_action ( 'SEUR_cambia_estado_pedido' , $order_id , 'entregado' ) ; delete_post_meta( $order_id, 'pidiendo_datos' ) ; delete_post_meta( $order_id, 'SEUR_envio' ) ; } else { do_action ( 'SEUR_cambia_estado_pedido' , $order_id , 'en_seur' ) ;  }  } $saved_data = get_metadata('post' , $order_id , 'SEUR' , true ) ; $saved_data['UPDATES_TIME'][] = date('d-m-Y H:i:s', current_time( 'timestamp' )) ; $saved_data['UPDATES_COUNT'] = count($saved_data['UPDATES_TIME']) ; $saved_data['FECHA_SYNCRO'] = date('d-m-Y H:i:s', current_time( 'timestamp' )) ; update_post_meta($order_id, 'SEUR', array_replace( $saved_data, $new_data )) ; return true ;  }  } public function ConsultaDetalleExpedicionesStr ( $expedicion ) { $acceso = SEUR()->API->getOption('acceso') ; $params = array ( 'in0' 	=> "S",																					'in1' 	=> $expedicion,																			'in2'	=> $acceso['user_seur'] ,																'in3'	=> $acceso['clave_user_seur'][0]													) ; try { $SOAP = new SoapClient('https://ws.seur.com/webseur/services/WSConsultaExpediciones?wsdl', array( 'connection_timeout' => 15 )) ; $trama = $SOAP->ConsultaDetalleExpedicionesStr( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } return  json_decode ( json_encode ( simplexml_load_string ( htmlspecialchars_decode ( str_replace ( '</EXPEDICIONES>', '', $trama->out) . '</EXPEDICIONES>' )  )  ) , true) ;  } public function consultaAlbaranes ( $expedicion ) { $acceso = SEUR()->API->getOption('acceso') ; $params = array ( 'in0' 	=> $expedicion , 'in1' 	=> '' , 'in2'	=> '' , 'in3'	=> '' , 'in4'	=> '' , 'in5'	=> $acceso['user_seur'] , 'in6'	=> $acceso['clave_user_seur'][0] , 'in7'	=> 'S' )  ; try { $SOAP = new SoapClient('https://ws.seur.com/webseur/services/WSConsultaAlbaranes?wsdl', array( 'connection_timeout' => 15 )) ; $trama = $SOAP->consultaAlbaranes( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } return  json_decode ( json_encode ( simplexml_load_string ( $trama->out )  ) , true) ;  } function Create_Arrays() { $this->estados_entregado = array(	'M001','M002', 'M003', 'M004', 'M005', 'M006', 'M009', 'M010', 'M011', 'M012', 'M013', 'M014', 'M015', 'M016', 'M017', 'M018', 'M019', 'M020', 'M025', 'M026', 'M027' , 'I574' , 'L001', 'L003', 'L010' , 'K561', 'K570', 'L872'	) ; $this->Tipo_via = array('ACC' => 'ACCESO' , 'ACE' => 'ACERA' , 'ACR' => 'ANTIGUA CARRETERA' , 'AER' => 'AERODROMO' , 'AFU' => 'AFUERAS' , 'AGR' => 'AGRUPACION' , 'ALD' => 'ALDEA DE' , 'ALM' => 'ALAMEDA' , 'ALQ' => 'ALQUERIA DE' , 'ALT' => 'ALTO' , 'AMP' => 'AMPLIACION' , 'AND' => 'ANDADOR' , 'ANE' => 'ANEJO' , 'APT' => 'APARTAMENTOS' , 'ARB' => 'ARRABAL DEL' , 'ARY' => 'ARROYO' , 'ATJ' => 'ATAJO' , 'AUT' => 'AUTOVIA' , 'AVD' => 'AVENIDA' , 'AZH' => 'AZINHAGA' , 'BAH' => 'BAHIA DE' , 'BAJ' => 'BAJADA A LA' , 'BAL' => 'BALCON' , 'BAR' => 'BARRIO' , 'BEC' => 'BECO' , 'BLQ' => 'BLOQUE' , 'BRA' => 'BARRERA DEL' , 'BRC' => 'BARRANCO DEL' , 'BRD' => 'BARRIADA' , 'BUL' => 'BULEVAR DEL' , 'BUN' => 'BUNGALOWS' , 'CAB' => 'CABECICO DEL' , 'CAL' => 'CALA BLANCA' , 'CAM' => 'CAMINO' , 'CAR' => 'CARRERO' , 'CAS' => 'CASETA' , 'CAÑ' => 'CAÑADA' , 'CCH' => 'CALÇADINHA' , 'CER' => 'CERRO' , 'CHA' => 'CHALET' , 'CID' => 'CIUDAD RESIDENCIAL' , 'CIR' => 'CIRCUNVALACION' , 'CL' => 'CALLE' , 'CLC' => 'CALÇADA' , 'CLJ' => 'CALLEJON' , 'CLZ' => 'CALZADA' , 'CMP' => 'CAMPO' , 'CNJ' => 'CONJUNTO RESIDENCIAL' , 'COL' => 'COLONIA' , 'COP' => 'COOPERATIVA' , 'COR' => 'CORRAL' , 'COT' => 'COTO' , 'CPL' => 'COMPLEJO' , 'CRC' => 'CERCADO' , 'CRL' => 'CARRIL DE' , 'CRT' => 'CARRETERA' , 'CRU' => 'CRUCE DE' , 'CSE' => 'CASERIO' , 'CSL' => 'CASAL' , 'CST' => 'CUESTA DEL' , 'CTJ' => 'CORTIJADA' , 'CTN' => 'CONTINUACION DE' , 'CTO' => 'CENTRO COMERCIAL' , 'CTR' => 'CARRETERA' , 'CUE' => 'CUEVAS' , 'CZO' => 'CALLIZO' , 'DEH' => 'DEHESA' , 'DES' => 'DESVIO DEL' , 'DIP' => 'DIPUTACION' , 'DIS' => 'DISEMINADO' , 'DSP' => 'DESPOBLADO' , 'EDF' => 'EDIFICIO LA' , 'ENS' => 'ENSANCHE DE' , 'ENT' => 'ENTRADA' , 'ESC' => 'ESCALINATA DO' , 'ESD' => 'ESCADAS' , 'ESH' => 'ESCADINHAS' , 'EST' => 'ESTRADA' , 'ETC' => 'ESTACION' , 'EXP' => 'EXPLANADA DE' , 'FIN' => 'FINCA DE' , 'FUE' => 'FUENTE' , 'GAL' => 'GALERIA' , 'GAV' => 'GAVETO' , 'GJA' => 'GRANJA' , 'GPO' => 'GRUPO' , 'GRV' => 'GRAN VIA' , 'GTA' => 'GLORIETA DE' , 'HAB' => 'HABITATGES' , 'HAC' => 'HACIENDA' , 'HIJ' => 'HIJUELA DE' , 'HOT' => 'HOTEL' , 'HOY' => 'HOYO' , 'HUE' => 'HUERTA' , 'JAR' => 'JARDIN' , 'LGO' => 'LARGO' , 'LJA' => 'LOJA' , 'LOM' => 'LOMA DE' , 'LTM' => 'LOTEAMENTO' , 'LUG' => 'LUGAR' , 'MAN' => 'MANZANA' , 'MER' => 'MERCADO' , 'MIR' => 'MIRADOR DE LA' , 'MON' => 'MONTANYA DE' , 'MSI' => 'MASIA' , 'MSO' => 'MANSO' , 'MUE' => 'MUELLE' , 'MUN' => 'MUNICIPIO' , 'MUR' => 'MURALLAS' , 'NUC' => 'NUCLEO RESIDENCIAL' , 'PAB' => 'PABELLON' , 'PAC' => 'PARCELA' , 'PAG' => 'PAGO' , 'PAL' => 'PARALELA' , 'PAR' => 'PARAJE' , 'PAS' => 'PASO' , 'PAT' => 'PATIO' , 'PCA' => 'PRACA' , 'PCT' => 'PRACETA' , 'PDA' => 'PARTIDADE LA' , 'PED' => 'PEDANIA' , 'PER' => 'PERPENDICULAR A' , 'PIS' => 'PISTA' , 'PJE' => 'PASAJE' , 'POB' => 'POBLADO' , 'POL' => 'POLIGONO INDUSTRIAL' , 'POR' => 'PORTAL' , 'POS' => 'POSTIGO' , 'PQE' => 'PARQUE' , 'PRA' => 'PRADO' , 'PRL' => 'PROLONGACION' , 'PRT' => 'PARTICULAR' , 'PSO' => 'PASEO' , 'PTA' => 'PUERTA' , 'PTO' => 'PUERTO DE' , 'PUE' => 'PUENTE DE' , 'PUJ' => 'PUJADA' , 'PYA' => 'PLAYA' , 'PZA' => 'PLAZA' , 'PZL' => 'PLAZUELA' , 'PZO' => 'PASADIZO' , 'PZT' => 'PLAZOLETA' , 'QTA' => 'QUINTA' , 'RAM' => 'RAMBLA DE' , 'RAV' => 'RAVAL' , 'RDA' => 'RONDA' , 'RED' => 'REDONDA DE' , 'RES' => 'RESIDENCIAL' , 'RIB' => 'RIBERA' , 'RIE' => 'RIERA' , 'RIN' => 'RINCON DE' , 'RML' => 'RAMAL' , 'RMP' => 'RAMPA' , 'ROT' => 'ROTONDA DEL' , 'RUA' => 'RUA DO' , 'RUE' => 'RUELA DO' , 'SAL' => 'SALIDA' , 'SDA' => 'SENDA DE LOS' , 'SEC' => 'SECTOR' , 'SIE' => 'SIERRA' , 'SUB' => 'SUBIDA' , 'TER' => 'TERMINO' , 'TES' => 'TESO' , 'TOR' => 'TORRE MANDO' , 'TRA' => 'TRASERA DEL' , 'TRR' => 'TRAVESERA' , 'TRT' => 'TORRENTE' , 'TRV' => 'TRAVESIA' , 'TTO' => 'TRANSITO DE LOS' , 'TVA' => 'TRAVESSA' , 'TVS' => 'TRANSVERSAL' , 'URB' => 'URBANIZACION' , 'VAL' => 'VALLS' , 'VEC' => 'VECINDARIO' , 'VER' => 'VEREDA' , 'VET' => 'VEINAT' , 'VIA' => 'VIA' , 'VIL' => 'VILLA DE' , 'VIV' => 'VIVIENDAS VELAZQUEZ' , 'VTA' => 'VENTA' , 'ZON' => 'ZONA' , ) ;  } public function Envios_array( $zona = 0 ) { $peninsula = array ( '1-2'	=>	'SEUR-24 ESTANDAR' , '31-2'	=> 	'SEUR-24 B2C CON NOTIFICACIONES' , '83-2'	=>	'SEUR-8:30 ESTANDAR' , '3-2' 	=> 	'SEUR-10 ESTANDAR' , '9-2' 	=> 	'SEUR-13:30 ESTANDAR' , '9-18'	=>	'SEUR-13:30 FRIO' )  ; $canarias = array ( '13-2' 	=> 	'SEUR-72H' , '17-2' 	=> 	'SEUR MARITIMO' , ) ; $INT = array ( '77-70' 	=> 	'SEUR CLASSIC TERRESTRE' , '19-70' 	=> 	'SEUR NETEXPRESS TERRESTRE' , '77-104' 	=> 	'SEUR PREDICT CROSSBORDER' , '7-108' 	=> 	'SEUR COURIER AEREO' , '77-114'	=>	'SEUR FRESH CLASSIC' , ) ; switch ($zona) { case 0: 				return $peninsula + $canarias + $INT ; case 1: 				return $peninsula ; case 2: 				return $canarias ; case 3: 				return $INT ; default: 				return array('000-000' => 'Zona de envío no definida.') ;  }  } public function Get_Servicio_Producto($clave) { $valores = preg_split("/[\s,-]+/", $clave ) ; foreach($valores as $key => $val ) $send[$key] = (int)$val ; return $send ;  } public function Get_Servicio_Producto_str ($clave) { return $this->Envios_array()[$clave] ;  } public function tarificacionPrivadaStr( $CP, $poblacion, $pais, $bultos, $kilos,  $servicio, $producto, $aduanaO='',$aduanaD='',  $complementos ='' ) { $Opc_acceso = SEUR()->API->getOption('acceso') ; $params = array( 'in0' 	=> 	'<REG>
<USUARIO>' . $Opc_acceso['user_seur'] . '</USUARIO>
<PASSWORD>' . $Opc_acceso['clave_user_seur'][0] . '</PASSWORD>
<NOM_POBLA_DEST>'. $poblacion .'</NOM_POBLA_DEST>
<Peso>' . $kilos . '</Peso>
<CODIGO_POSTAL_DEST>' . $CP . '</CODIGO_POSTAL_DEST>
<CodContableRemitente>' . $Opc_acceso['codigo_ccc'] . '-' . $Opc_acceso['franquicia'] .'</CodContableRemitente>
<PesoVolumen>' . $kilos . '</PesoVolumen>
<Bultos>' . $bultos . '</Bultos>
<CodServ>' . $servicio . '</CodServ>
<CodProd>' . $producto . '</CodProd>
<TipoEnvioAduanero>'. SEUR()->API->getOption('servicios' ,'Tipo_mercancia') . '</TipoEnvioAduanero>
<ValDeclarado></ValDeclarado>
<TpDespAduanaEntrada>'. $aduanaD. '</TpDespAduanaEntrada>
<TpDespAduanaSalida>' .$aduanaO . '</TpDespAduanaSalida>
<FechaVigenciaTasacion></FechaVigenciaTasacion>
<SERVICIOS_COMPLEMENTARIOS>' .$complementos . '</SERVICIOS_COMPLEMENTARIOS>
<COD_IDIOMA>ES</COD_IDIOMA>
<CodPaisIso>' . $pais. '</CodPaisIso>
</REG>' )  ; try { $SOAP = new SoapClient('https://ws.seur.com/WSEcatalogoPublicos/servlet/XFireServlet/WSServiciosWebPublicos?wsdl', array( 'connection_timeout' => 15 )) ; $datos = $SOAP->tarificacionPrivadaStr( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } $datos =  	json_decode ( json_encode ( simplexml_load_string ( iconv( "UTF-8", "ISO-8859-1" , htmlspecialchars_decode ( $datos->out )  )  )  ) , true) ; return $datos ;  } public function Tarifa_str($CP, $poblacion, $pais, $bultos, $kilos, $reembolso, $pedido = null) { $mensaje="" ; $Opc_Serv = SEUR()->API->getOption('servicios') ; $producto = '' ; $servicio = '' ; $aduanaO = $Opc_Serv['aduana_origen'] ; $aduanaD = $Opc_Serv['aduana_destino'] ; $msg = '' ; if($pedido != null ) { $mensaje.= $this->Get_Servicio_Producto_str($pedido->pidiendo_datos['Tarifa']) ; $Servicios = $this->Get_Servicio_Producto ($pedido->pidiendo_datos['Tarifa'] ) ; $producto = $Servicios[1] ; $servicio = $Servicios[0] ;  } if ($pais =="ES" || $pais=="PT" || $pais=="AD") { if ( ( $franq = $this->VerificarPoblacion($poblacion, $CP) ) === false ) { return '<hr>' . SEUR()->API->div_class( __('Código Postal y Población no se han encontrado en Nomenclator de SEUR.', 'seur') . '<br>'. 	__('Consulte Nomenclator y ajuste Población y Postal.', 'seur'), 'SEUR_Error') ; } else { if ($franq=="74" || $franq=="77"  || $franq=="56" || $franq=="35" || $franq=="38" || $franq=="52" || $franq=="60" || $franq=="70") { if ($franq=="74" || $franq=="77" || $franq=="56") { if($pedido == null ) { $mensaje.= $this->Get_Servicio_Producto_str($Opc_Serv['nacional']) ; $Servicios = $this->Get_Servicio_Producto($Opc_Serv['nacional']) ; $producto = $Servicios[1] ; $servicio = $Servicios[0] ;  } } else { if($pedido == null ) { $Servicios = $this->Get_Servicio_Producto($Opc_Serv['canarias']) ; $mensaje.= $this->Get_Servicio_Producto_str($Opc_Serv['canarias']) ; $producto = $Servicios[1] ; $servicio = $Servicios[0] ;  }  } if ($aduanaO=="P" ) $mensaje.="<br>" . __("Aduana de salida pagada por el remitente.", "seur") ; if ($aduanaD=="P" ) $mensaje.="<br>" . __("Aduana de entrada pagada por el remitente.", "seur") ; } else { if( $pedido == null ) { $mensaje.= $this->Get_Servicio_Producto_str($Opc_Serv['nacional']) ; $Servicios = $this->Get_Servicio_Producto($Opc_Serv['nacional']) ; $producto = $Servicios[1] ; $servicio = $Servicios[0] ;  } $tipomercancia="" ; $aduanaO="" ; $aduanaD="" ;  }  } } else { if($pedido == null ) { $mensaje.= $this->Get_Servicio_Producto_str($Opc_Serv['internacional']) ; $Servicios = $this->Get_Servicio_Producto($Opc_Serv['internacional']) ; $producto = $Servicios[1] ; $servicio = $Servicios[0] ;  } if ( $reembolso > 0 ) { $mensaje.="<br>" . __('Internacional no admite envío contra reembolso.','seur') ; $reembolso = 0 ;  } $CP="08001" ; $poblacion="BARCELONA" ; $tipomercancia="" ; $aduanaO="" ; $aduanaD="" ;  } if ( $reembolso > 0) { $complementarios = "30;P;". str_replace(".",",", $reembolso) ; $mensaje.= "<br>" .  __("Gastos de reembolso pagados por el remitente.", "seur") ; } else { $complementarios="" ;  } $respuesta = $this->tarificacionPrivadaStr($CP, $poblacion, $pais, $bultos, $kilos, $servicio, $producto, $aduanaO, $aduanaD, $complementarios) ; if(isset($respuesta['ERROR']) ) return $this->Soap_fault($respuesta['MSG']) ; if ( isset($respuesta['DESCRIPCION']) ) { $msg .= '<hr>' . SEUR()->API->div_class ( $respuesta['DESCRIPCION'] , 'SEUR_Error') ; } else if ( isset($respuesta['@attributes']['NUM']) && $respuesta['@attributes']['NUM'] == 0 ) { SEUR()->log( array( 'CP:'. $CP, 'Poblacion:'.$poblacion, 'Pais:'.$pais, 'Bultos:'. $bultos,'Kilos:'. $kilos, 'Servicio:'.$servicio,'Producto:'. $producto, 'Ad Org:'.$aduanaO,'Ad Dest.:'. $aduanaD, 'Compl:' . $complementarios, 'Resp SOAP:' , $respuesta)) ; $msg .= '<hr>' . SEUR()->API->div_class ( __('No se encontró tarifa con estos datos, pregunte a su comercial.','seur') , 'SEUR_Error') ; } else if (isset($respuesta['REG'])) { $total = 0 ; $iva = 0 ; $gest_reembolso = 0 ; $msg .= '<hr><table class="Tabla_SEUR">' ; foreach ($respuesta['REG'] as $linea) { $msg .= "<tr bgcolor='#FFF'>" ; if ( $linea['COD_CONCEPTO_IMP'] == '70' ) { $hay_iva = true ; $iva = $linea['VALOR'] ; } else if ($linea['COD_CONCEPTO_IMP'] == '40') { $gest_reembolso = $linea['VALOR'] ; } else { $msg .= "<td>".  $linea['NOM_CONCEPTO_IMP'] . "</td>" ; $msg .= "<td style='text-align:right'>". round($linea['VALOR'], 2) . "</td>" ; $total = $total + (float)$linea['VALOR'] ;  } $msg .= "</tr>" ;  } if($gest_reembolso > 0) { $msg .= "<tr bgcolor='#FFF'><td colspan=2></td><tr bgcolor='#FFF'><td style='font-weight:bold;'>Total porte.</td><td style='font-weight:bold;text-align:right'>" .$total ."</td></tr>" ; $msg .= "<tr bgcolor='#FFF'><td colspan=2></td><tr bgcolor='#FFF'><td>Gestión Reemb.</td><td style='text-align:right'>". $gest_reembolso . "</td></tr>" ; $total += $gest_reembolso ;  } $msg .= "<tr bgcolor='#FFF'><td colspan=2></td><tr bgcolor='#FFF'><td style='font-weight:bold;'>Total IVA Exc.</td><td style='font-weight:bold;text-align:right'>" .$total ."</td></tr>" ; $msg .= "<tr bgcolor='#FFF'><td>I.V.A.</td><td style='text-align:right'>". $iva . "</td></tr>" ; $total += $iva ; $msg .= "<tr bgcolor='#FFF'><td colspan=2></td><tr bgcolor='#FFF'><td style='font-weight:bold;'>Total IVA Inc.</td><td style='text-align:right;color:red;font-weight:bold; font-size:20px;'>" . $total ."</td></tr></table>" ; } else { SEUR()->log( array( 'CP:'. $CP, 'Poblacion:'.$poblacion, 'Pais:'.$pais, 'Bultos:'. $bultos,'Kilos:'. $kilos, 'Servicio:'.$servicio,'Producto:'. $producto, 'Ad Org:'.$aduanaO,'Ad Dest.:'. $aduanaD, 'Compl:' . $complementarios, 'Resp SOAP:' , $respuesta)) ; $msg .= '<hr>' . SEUR()->API->div_class ( __('Se encontraron problemas de conexión o datos erroneos en SEUR.','seur') , 'SEUR_Error') ; } $msg .= "<hr>" . SEUR()->API->div_class ( $mensaje ) ."<hr>" ; return $msg ;  } public function consultaListadoExpedicionesStr ($expedicion = '', $referencia = '', $Fechad = '' , $Fechah = '', $Estado = '' ) { $acceso = SEUR()->API->getOption('acceso') ; $params = array ( 'in0' 	=> "S",																					'in1' 	=> $expedicion,																			'in2' 	=> '',																					'in3' 	=> $referencia,																			'in4' 	=> $acceso['codigo_ccc'] . '-' . $acceso['franquicia'] ,								'in5' 	=> $Fechad,																				'in6' 	=> $Fechah,																				'in7'	=> $Estado,																				'in8' 	=> "" , 'in9' 	=> "" , 'in10' 	=> "" , 'in11' 	=> "" , 'in12'	=> $acceso['user_seur'] ,																'in13'	=> $acceso['clave_user_seur'][0],														'in14' 	=> 'N'																				) ; try { $SOAP = new SoapClient('https://ws.seur.com/webseur/services/WSConsultaExpediciones?wsdl', array( 'connection_timeout' => 15 )) ; $xml = $SOAP->consultaListadoExpedicionesStr( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } return 	json_decode ( json_encode ( simplexml_load_string ( $xml->out )  ) , true) ;  } public function seguimientos_str ($expedicion = '', $referencia = '', $Fechad = '' , $Fechah = '', $Estado = '' ) { $xml = $this->consultaListadoExpedicionesStr( $expedicion , $referencia , $Fechad , $Fechah, $Estado ) ; if(isset($xml['ERROR']) ) return $this->Soap_fault($xml['MSG']) ; ob_start() ; if( isset($xml['CODIGO']) && substr($xml['CODIGO'] ,0,4) == 'CEXP'  ) { echo 	SEUR()->API->div_class ( substr($xml['CODIGO'] ,5,4) . ' - ' .  $xml['DESCRIPCION'] ,  'SEUR_Error') ; } else if ( $xml['@attributes']['NUM'] == '0') { echo 	SEUR()->API->div_class ( __('No se encontro ningún registro.', 'seur' ) , 'SEUR_Error') ; } else { echo '<table class="Tabla_SEUR">
<tr bgcolor=#EEEEEE style="text-align: center;font-weight: bold;">
<td colspan=5 >' . __('Fecha de consulta','seur'). ': '. date('d-m-Y H:i:s', current_time( 'timestamp' )) . '</td>
<tr>
<tr class="SEUR_Cab_Tablas" >
<td>' . __('Nº Seguimiento','seur') 	. '</td>
<td>' . __('Pedido','seur') 			. '</td>
<td>' . __('Destinatario','seur') 		. '</td>
<td>' . __('Situación actual','seur') 	. '</td>
<td>' . __('Fecha situación','seur') 	. '</td>
</tr>' ; $bcolor="#ffffff" ; $fechaexp1 ='' ; if( $xml['@attributes']['NUM'] == '1') { $Exp = $xml['EXPEDICION'] ; $fechaexp0 = substr($Exp['FECHA_CAPTURA'],0,10) ; echo "<tr bgcolor=$bcolor style='text-align: center;font-weight: bold;'>" ; echo "<td colspan=5 >". SEUR()->API->My_DateTime($fechaexp0) . "</td>" ; echo "<tr>" ; echo "<tr bgcolor=$bcolor>" ; echo "<td>". $Exp['EXPEDICION_NUM'] . "</td>" ; echo "<td>". $this->URL_to_order($Exp['REMITE_REF']) . "</td>" ; echo "<td>". $Exp['DESTINA_NOMBRE']. "</td>" ; echo "<td>". $Exp['DESCRIPCION_PARA_CLIENTE'] . "</td>" ; echo "<td>". $Exp['FECHA_SITUACION'] . "</td>" ; echo "<tr>" ; $fechaexp1=substr($Exp['FECHA_CAPTURA'],0,10) ; } else { $ordenados = array() ; foreach ($xml['EXPEDICION'] as $Exp) { $ordenados[date('Y-m-d', strtotime($Exp['FECHA_CAPTURA']))][$Exp['EXPEDICION_NUM']] =  $Exp ;  } krsort($ordenados) ; foreach ($ordenados as $Key => $Exp_dia) { echo "<tr bgcolor=$bcolor style='text-align: center;font-weight: bold;'>" ; echo "<td colspan=5 >" . __('Fecha de envío','seur'). ': '. SEUR()->API->My_DateTime(date('d-m-Y', strtotime($Key))) . "</td>" ; echo "<tr>" ; krsort($Exp_dia) ; foreach ($Exp_dia as $Exp) { echo "<tr bgcolor=$bcolor>" ; echo "<td><b>". $Exp['EXPEDICION_NUM'] . "</b></td>" ; echo "<td>". $this->URL_to_order($Exp['REMITE_REF']) . "</td>" ; echo "<td>". $Exp['DESTINA_NOMBRE']. "</td>" ; echo "<td>". $Exp['DESCRIPCION_PARA_CLIENTE'] ."</td>" ; echo "<td>". date('H:i d-m-Y', strtotime($Exp['FECHA_SITUACION'])) . "</td>" ; echo "<tr>" ;  } if ($bcolor=="#ffffff" ) $bcolor="#e2f6f8" ; else
$bcolor="#ffffff" ;  }  } echo "</table>" ;  } return ob_get_clean() ;  } public function infoPoblacionesCortoStr($poblacion = '' , $CP = '', $pais = '' ) { $acceso = SEUR()->API->getOption('acceso') ; $params = array ( 'in0'=> "" , 'in1'=> $poblacion , 'in2'=> $CP , 'in3'=> "" , 'in4'=> "" , 'in5'=>	$acceso['usuario_cit'] , 'in6'=>	$acceso['clave_cit'][0] )  ; try { $SOAP = new SoapClient('https://ws.seur.com/WSEcatalogoPublicos/servlet/XFireServlet/WSServiciosWebPublicos?wsdl', array( 'connection_timeout' => 15 )) ; $xml = $SOAP->infoPoblacionesCortoStr( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } $xml =  json_decode ( json_encode ( simplexml_load_string ( iconv( "UTF-8", "ISO-8859-1" , htmlspecialchars_decode ( $xml->out )  )  )  ) , true ) ; return $xml ;  } public function nomenclator_str ( $poblacion = '', $CP = '', $pais = '' ) { if( $poblacion != '' ||  $CP != '' ) { $xml = $this->infoPoblacionesCortoStr($poblacion, $CP , $pais = '') ; if(isset($xml['ERROR']) ) return $this->Soap_fault() ; if($xml == false ) return $this->Soap_fault(__('SEUR no devolvió ningún valor.','seur' )) ; ob_start() ; $bcolor="#ffffff" ; echo '<table class="Tabla_SEUR">' ; foreach($xml as $key => $valor) { if($key == '@attributes' ) { $cuantos = $valor['NUM'] ; if ($cuantos > 0) { echo '<tr><td colspan=3>' ; echo SEUR()->API->div_class ('Se han encontrado ' . $cuantos . ' coincidencias') ; echo '</td></tr>' ; echo '<tr class="SEUR_Cab_Tablas">' ; echo "<td >" . __('Código postal', 'seur') . "</td>" ; echo "<td >" . __('Población', 'seur') . "</td>" ; echo "<td >" . __('Provincia', 'seur') . "</td>" ; echo '</tr>' ; } else { echo '<tr><td colspan=3>' ; echo SEUR()->API->div_class ( __('No se han encontrado resultados', 'seur') , 'SEUR_Error') ; echo '</td></tr>' ; break ;  } } else if ( substr($key,0,3) == 'REG' ) { echo '<tr>' ; echo "<td bgcolor=$bcolor>" . $valor['CODIGO_POSTAL'] . "</td>" ; echo "<td bgcolor=$bcolor>" . $valor['NOM_POBLACION'] . "</td>" ; echo "<td bgcolor=$bcolor>" . $valor['NOM_PROVINCIA'] . "</td>" ; echo '</tr>' ; if ( $bcolor == "#ffffff" ) $bcolor = "#e2f6f8" ; else $bcolor = "#ffffff" ;  }  } echo '</table>' ; return ob_get_clean() ; } else { ob_start() ; echo '
<table class="Tabla_SEUR">
<tr bgcolor="#FFF">
<td>' ; echo SEUR()->API->div_class ( __('No se ha introducido una población o código postal.','seur'), 'SEUR_Error') ; echo '</td>
</tr>
</table>' ; return ob_get_clean() ;  }  } public function VerificarPoblacion($poblacion = '' , $CP = '') { $xml = $this->infoPoblacionesCortoStr($poblacion, $CP ) ; if(isset($xml['ERROR']) ) return $this->Soap_fault($xml['MSG']) ; if ($xml['@attributes']['NUM'] == 1 ) return $xml['REG1']['COD_UNIDAD_ADMIN'] ; else
return false ;  } public function ConsultaRecogidas($Id_Recogida) { $params = array ( 'in0'=>	$Id_Recogida , 'in1'=> "" , 'in2'=>	SEUR()->API->getOption('acceso', 'user_seur') , 'in3'=>	SEUR()->API->getOption('acceso', 'clave_user_seur')[0] )  ; try { $cliente = new SoapClient('https://ws.seur.com/webseur/services/WSConsultaRecogidas?wsdl', array( 'connection_timeout' => 15 )) ; $xml = $cliente->consultaDetallesRecogidasStr( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } return  json_decode ( json_encode ( simplexml_load_string ( $xml->out )  ) , true ) ;  } public function anularRecogida($Id_Recogida) { $params = array ( 'in0'=>	$Id_Recogida , 'in1'=>"" , 'in2'=>	SEUR()->API->getOption('acceso', 'user_seur') , 'in3'=>	SEUR()->API->getOption('acceso', 'clave_user_seur')[0] )  ; try { $cliente = new SoapClient('https://ws.seur.com/webseur/services/WSCrearRecogida?wsdl', array( 'connection_timeout' => 15 )) ; $xml = 	$cliente->anularRecogida( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } return  json_decode ( json_encode ( simplexml_load_string ( iconv( "UTF-8", "ISO-8859-1" , htmlspecialchars_decode ( $xml->out )  )  )  ) , true ) ;  } public function anularRecogida_str ($Id_Recogida) { $xml = $this->anularRecogida($Id_Recogida) ; if(isset($xml['ERROR']) ) return $this->Soap_fault($xml['MSG']) ; $anula['MSG_XML'] = $xml ; if ( isset( $xml['CODIGO'] )) { $anula['MSG'] =  SEUR()->API->div_class ( __('SE HA PRODUCIDO UN ERROR', 'seur') . ':<br>' .	$xml['DESCRIPCION'] . '<hr>', 'SEUR_Error' ) ; } else { $anula['MSG'] = SEUR()->API->div_class (	__( 'Se ha anulado la recogida correctamente.', 'seur')	) ;  } return $anula ;  } public function ConsultaRecogidas_str($Id_Recogida) { $xml = $this->ConsultaRecogidas($Id_Recogida) ; if(isset($xml['ERROR']) ) return $this->Soap_fault($xml['MSG']) ; ob_start() ; if ( $xml['@attributes']['NUM'] > 0 ) { $Rec = $xml['RECOGIDA'] ; echo "<div style='color:#e53920;font-weight:bold;'>" . __('IDENTIFICADOR:','seur') . ' ' . $Id_Recogida . "</div>" ; echo "<div style='color:#0074a2;font-weight:bold;'>" ; echo 	"<HR>RECOGER EN:<BR>" . $Rec['DONDE_NOMBRE']. "<br>" . $Rec['DONDE_VIA_NOMBRE']. "<br>" . $Rec['DONDE_CP']. ' - ' . $Rec['DONDE_POBLACION']. ' - ' . $Rec['DONDE_PROVINCIA']. "<hr>" . __('HORARIO','seur') . ':<br>' ; if($Rec['HORARIO_PREP_DM'] != '-'  && $Rec['HORARIO_PREP_HM'] != '-' ) echo __('MAÑANA','seur') . ': ' . $Rec['HORARIO_PREP_DM'] . ' - ' . $Rec['HORARIO_PREP_HM']. "<br>" ; if($Rec['HORARIO_PREP_DT'] != '-'  && $Rec['HORARIO_PREP_HT'] != '-' ) echo __('TARDE','seur') . ': ' . $Rec['HORARIO_PREP_DT'] . ' - ' . $Rec['HORARIO_PREP_HT'] . "<hr>" ; if($Rec['OBSERVACIONES'] !='-' ) echo __('OBSERVACIONES','seur') . ':<br>' . $Rec['OBSERVACIONES'] . "<hr>" ; echo __('ESTADO','seur') . ':<br>' ; if(isset($Rec['SITUACIONES']['SITUACION']['FECHA_SITUACION'])) { echo $Rec['SITUACIONES']['SITUACION']['FECHA_SITUACION'] . " = ". $Rec['SITUACIONES']['SITUACION']['DESCRIPCION_CLIENTE'] ."<br>" ; } else { foreach($Rec['SITUACIONES']['SITUACION'] as $cont) { echo $cont['FECHA_SITUACION'] . " = ". $cont['DESCRIPCION_CLIENTE'] ."<br>" ;  }  } echo "</div>" ; } else { echo "<div style='color:#0074a2;font-weight:bold;'>" ; echo "<HR>No se encontraron recogidas.<HR>" ; echo "</div>" ;  } $recogida =  ob_get_clean() ; return $recogida ;  } public function CrearRecogida ( $Md, $Mh, $Td, $Th, $kilos, $bultos, $fecha = null, $tipo = 'normal', $Obs = '' ) { if ($fecha == null) $fecha = date('Y-m-d', current_time( 'timestamp' )) ; $TRAMA_KILOS="" ; $Opc_acceso = SEUR()->API->getOption('acceso') ; $Opc_direccion = SEUR()->API->getOption('direccion') ; $Opc_contacto = SEUR()->API->getOption('contacto') ; if( $tipo == 'frio') { $Obs = __('** RECOGIDA DE FRIO **', 'xtend') . " - " . $Obs ; $Producto 	= 18 ; $Servicio 	= 9 ; } else { $Producto 	= 2 ; $Servicio 	= 1 ;  } $DatosRecogida = 	"<recogida>" . "<usuario>" . $Opc_acceso['user_seur']. "</usuario>" . "<password>" . $Opc_acceso['clave_user_seur'][0] ."</password>" . "<razonSocial>" . $Opc_direccion['empresa'] . "</razonSocial>" . "<nombreEmpresa>" . $Opc_direccion['empresa'] ."</nombreEmpresa>" . "<nombreContactoOrdenante>" . $Opc_contacto['nombre'] . "</nombreContactoOrdenante>" . "<apellidosContactoOrdenante>" . $Opc_contacto['apellidos']. "</apellidosContactoOrdenante>" . "<prefijoTelefonoOrdenante>34</prefijoTelefonoOrdenante>" . "<telefonoOrdenante>" . $Opc_contacto['telefono'] . "</telefonoOrdenante>" . "<prefijoFaxOrdenante />" . "<faxOrdenante />" . "<nifOrdenante>" . $Opc_direccion['nif'] . "</nifOrdenante>" . "<paisNifOrdenante>". $Opc_direccion['pais'] ."</paisNifOrdenante>" . "<mailOrdenante>" . $Opc_contacto['email'] . "</mailOrdenante>" . "<tipoViaOrdenante>" . $Opc_direccion['tipo_via'] . "</tipoViaOrdenante>" . "<calleOrdenante>" . $Opc_direccion['nombre_via'] . "</calleOrdenante>" . "<tipoNumeroOrdenante>N.</tipoNumeroOrdenante>" . "<numeroOrdenante>" . $Opc_direccion['numero_via'] . "</numeroOrdenante>" . "<escaleraOrdenante>". $Opc_direccion['escalera'] . "</escaleraOrdenante>" . "<pisoOrdenante>" . $Opc_direccion['piso'] ."</pisoOrdenante>" . "<puertaOrdenante>" . $Opc_direccion['puerta'] . "</puertaOrdenante>" . "<codigoPostalOrdenante>" . $Opc_direccion['codigo_postal'] . "</codigoPostalOrdenante>" . "<poblacionOrdenante>" . $Opc_direccion['poblacion'] . "</poblacionOrdenante>" . "<provinciaOrdenante>" . $Opc_direccion['provincia'] . "</provinciaOrdenante>" . "<paisOrdenante>" . $Opc_direccion['pais'] . "</paisOrdenante>" . "<diaRecogida>" . date("d", strtotime($fecha)) . "</diaRecogida>" . "<mesRecogida>" . date("m", strtotime($fecha)) . "</mesRecogida>" . "<anioRecogida>" . date("Y", strtotime($fecha)) . "</anioRecogida>" . "<servicio>" . $Servicio . "</servicio>" . "<horaMananaDe>" . $Md ."</horaMananaDe>" . "<horaMananaA>" . $Mh ."</horaMananaA>" . "<numeroBultos>". $bultos ."</numeroBultos>" . "<mercancia>2</mercancia>" . "<horaTardeDe>" . $Td. "</horaTardeDe>" . "<horaTardeA>" . $Th . "</horaTardeA>" . "<tipoPorte>P</tipoPorte>" . "<observaciones>". $Obs ."</observaciones>" . "<tipoAviso>EMAIL</tipoAviso>" . "<idiomaContactoOrdenante>ES</idiomaContactoOrdenante>" . "<razonSocialDestino>" . $Opc_direccion['empresa'] . "</razonSocialDestino>" . "<nombreContactoDestino>" . $Opc_contacto['nombre'] . "</nombreContactoDestino>" . "<apellidosContactoDestino>" . $Opc_contacto['apellidos'] . "</apellidosContactoDestino>" . "<telefonoDestino>" . $Opc_contacto['telefono'] . "</telefonoDestino>" . "<tipoViaDestino>" . $Opc_direccion['tipo_via'] . "</tipoViaDestino>" . "<calleDestino>" . $Opc_direccion['nombre_via'] . "</calleDestino>" . "<tipoNumeroDestino>N.</tipoNumeroDestino>" . "<numeroDestino>" . $Opc_direccion['numero_via'] . "</numeroDestino>" . "<escaleraDestino>". $Opc_direccion['escalera'] . "</escaleraDestino>" . "<pisoDestino>". $Opc_direccion['piso'] ."</pisoDestino>" . "<puertaDestino>". $Opc_direccion['puerta'] . "</puertaDestino>" . "<codigoPostalDestino>" . $Opc_direccion['codigo_postal'] . "</codigoPostalDestino>" . "<poblacionDestino>" . $Opc_direccion['poblacion'] . "</poblacionDestino>" . "<provinciaDestino>" . $Opc_direccion['provincia'] . "</provinciaDestino>" . "<paisDestino>" . $Opc_direccion['pais'] . "</paisDestino>" . "<prefijoTelefonoDestino>34</prefijoTelefonoDestino>" . "<razonSocialOrigen>" . $Opc_direccion['empresa'] . "</razonSocialOrigen>" . "<nombreContactoOrigen>" . $Opc_contacto['nombre']. "</nombreContactoOrigen>" . "<apellidosContactoOrigen>" . $Opc_contacto['apellidos'] . "</apellidosContactoOrigen>" . "<telefonoRecogidaOrigen>" . $Opc_contacto['telefono'] . "</telefonoRecogidaOrigen>" . "<tipoViaOrigen>" . $Opc_direccion['tipo_via'] . "</tipoViaOrigen>" . "<calleOrigen>" . $Opc_direccion['nombre_via'] . "</calleOrigen>" . "<tipoNumeroOrigen>N.</tipoNumeroOrigen>" . "<numeroOrigen>" . $Opc_direccion['numero_via'] . "</numeroOrigen>" . "<escaleraOrigen>". $Opc_direccion['escalera'] . "</escaleraOrigen>" . "<pisoOrigen>". $Opc_direccion['piso'] ."</pisoOrigen>" . "<puertaOrigen>". $Opc_direccion['puerta'] ."</puertaOrigen>" . "<codigoPostalOrigen>". $Opc_direccion['codigo_postal'] ."</codigoPostalOrigen>" . "<poblacionOrigen>" . $Opc_direccion['poblacion'] . "</poblacionOrigen>" . "<provinciaOrigen>" . $Opc_direccion['provincia'] . "</provinciaOrigen>" . "<paisOrigen>". $Opc_direccion['pais'] ."</paisOrigen>" . "<prefijoTelefonoOrigen>34</prefijoTelefonoOrigen>" . "<producto>" .$Producto . "</producto>" . "<entregaSabado>N</entregaSabado>" . "<entregaNave>N</entregaNave>" . "<tipoEnvio>N</tipoEnvio>" . "<valorDeclarado>0</valorDeclarado>" . "<listaBultos>1;1;1;". $kilos .";0/</listaBultos>" . "<cccOrdenante>". $Opc_acceso['codigo_ccc'] . '-' . $Opc_acceso['franquicia'] . "</cccOrdenante>" . "<numeroReferencia></numeroReferencia>" . "<ultimaRecogidaDia />" . "<nifOrigen></nifOrigen>" . "<paisNifOrigen></paisNifOrigen>" . "<aviso>N</aviso>" . "<cccDonde />" . "<cccAdonde></cccAdonde>" . "<tipoRecogida></tipoRecogida>" . "</recogida>" ; $params = array( 'in0' => $DatosRecogida ) ; try { $soap_client = new SoapClient('https://ws.seur.com/webseur/services/WSCrearRecogida?wsdl', array( 'connection_timeout' => 15 )) ; $xml =  $soap_client->crearRecogida( $params ) ; } catch (SoapFault $fault) { $xml=array() ; $xml['ERROR'] = $fault->faultcode ; $xml['MSG'] = $fault->faultstring ; return $xml ;  } $xml =  json_decode ( json_encode ( simplexml_load_string ( $xml->out )  ) , true) ; $xml['DATOS_MANDADOS'] = $DatosRecogida ; return $xml ;  } public function CrearRecogida_str( $Md, $Mh, $Td, $Th, $kilos, $bultos,  $fecha = null, $tipo = 'normal', $Obs = '') { $xml = $this->CrearRecogida ( $Md, $Mh, $Td, $Th, $kilos, $bultos, $fecha, $tipo, $Obs) ; if(isset($xml['ERROR'])) { $recogida['LOCALIZADOR'] = '' ; $recogida['MSG'] = $this->Soap_fault($xml['MSG']) ; return $recogida ;  } $recogida['MSG_XML'] = $xml ; if ( isset( $xml['CODIGO'] )) { $recogida['MSG'] =  SEUR()->API->div_class ( __('SE HA PRODUCIDO UN ERROR', 'seur') . ':<br>' .	$xml['DESCRIPCION'] . '<hr>', 'SEUR_Error' ) ; $recogida['LOCALIZADOR'] = '' ; } else { $recogida['MSG'] = SEUR()->API->div_class (	__( 'Se ha creado la recogida.', 'seur') . '<br>' . __( 'Localizador', 'seur') .': ' . $xml['LOCALIZADOR'] )  ; $recogida['LOCALIZADOR'] =  $xml['LOCALIZADOR'] ;  } return $recogida ;  } public function CrearEnvio( $order_id, $datos ) { $this->pedido 	= 	SEUR()->API->getOrder($order_id) ; $Opc_acceso 	=	SEUR()->API->getOption('acceso') ; $Opc_direccion 	= 	SEUR()->API->getOption('direccion') ; $Opc_contacto 	= 	SEUR()->API->getOption('contacto') ; $Opc_servicios 	= 	SEUR()->API->getOption('servicios') ; $Opc_avisos		= 	SEUR()->API->getOption('avisos') ; $id_pedido =  version_compare( WC_VERSION, '2.7', '<' )  ? $this->pedido->id : $this->pedido->get_id() ; $ADUANASSW="" ; $INTERNACIONALSW="" ; $B2CSW = "" ; if( $this->pedido->SEUR_envio['key_tipo_envio'] == 'internacional' ) { $INTERNACIONALSW= "<id_mercancia>". $Opc_servicios['id_mercancia_internacional'] ."</id_mercancia>" . "<descripcion_mercancia>" . $Opc_servicios['descripcion_internacional'] . "</descripcion_mercancia>" . "<codigo_pais_destino>" . $this->pedido->_shipping_country . "</codigo_pais_destino>" ;  } if ( isset($this->pedido->SEUR_envio["Franquicia_Destino"]) && in_array( $this->pedido->SEUR_envio["Franquicia_Destino"], array( "35", "38", "52", "60", "70", "74", "77", "56" )) ) { $ADUANASSW=	"<tipo_mercancia>". $datos['Tipo_mercancia_aduana'] ."</tipo_mercancia>" . "<valor_declarado>". str_replace (",", ".",$datos['valor_declarado_aduana']) . "</valor_declarado>" . "<aduana_origen>". $datos['aduana_origen']. "</aduana_origen>" . "<aduana_destino>". $datos['aduana_destino']. "</aduana_destino>" ;  } $email_consigna 	= $this->pedido->_billing_email ; $telef_consigna 	= property_exists($this->pedido, '_shipping_phone') ? $this->pedido->_shipping_phone : $this->pedido->_billing_phone ; if($this->pedido->SEUR_envio['servicio'] == 31 && $this->pedido->SEUR_envio['producto'] == 2 ) { $B2CSW =
"<test_preaviso>" . $Opc_avisos['preaviso'] . "</test_preaviso>" . "<test_reparto>" . $Opc_avisos['reparto'] . "</test_reparto>" . "<test_sms>" . $Opc_avisos['Notificar_sms'] . "</test_sms>" . "<test_email>" . $Opc_avisos['notificar_email'] . "</test_email>" . "<sms_consignatario>" . $telef_consigna . "</sms_consignatario>" . "<email_consignatario>" . $email_consigna . "</email_consignatario>" ;  } if( isset($datos['contra_reembolso'])) { $contrareembolso = 	"<claveReembolso>" . $datos['contra_reembolso'] . "</claveReembolso>" . "<valorReembolso>" . str_replace(",",".",$datos['valor_reembolso']) . "</valorReembolso>" ; } else { $contrareembolso = "<claveReembolso></claveReembolso><valorReembolso></valorReembolso>" ;  } if ( isset($datos['entrega_sabado']) && $datos['entrega_sabado'] == "S" ) $entregasabado="<entrega_sabado>S</entrega_sabado>" ; else
$entregasabado="" ; $nombre_consigna 	= $this->pedido->_shipping_first_name . " " . $this->pedido->_shipping_last_name ; $direccion_consigna = trim( $this->pedido->_shipping_address_1 . " " . $this->pedido->_shipping_address_2 ) ; if( property_exists($this->pedido ,  'SEUR_envio' ) && isset($this->pedido->SEUR_envio['referencia'] ) ) $referencia =  $this->pedido->SEUR_envio['referencia'] ; else
$referencia = $id_pedido ; $Bulto="<bulto>" . "<ci>" . $Opc_acceso['codigo_cit'] ."</ci>" . "<nif>" . $Opc_direccion['nif'] ."</nif>" . "<ccc>" . $Opc_acceso['codigo_ccc'] ."</ccc>" . "<servicio>". $this->pedido->SEUR_envio['servicio'] ."</servicio>" . "<producto>". $this->pedido->SEUR_envio['producto'] ."</producto>" . "<total_bultos>" . $datos['bultos'] ."</total_bultos>" . "<total_kilos>". $datos['kilos'] ."</total_kilos>" . "<pesoBulto>". $datos['kilos']/$datos['bultos'] . "</pesoBulto>" . "<observaciones>" . SEUR()->API->Depurar( $datos['nota_cliente'] ) . "</observaciones>" . "<referencia_expedicion>" . $referencia . "</referencia_expedicion>" . "<clavePortes>" . $datos['cargo_portes'] . "</clavePortes>" . "<clavePod></clavePod>" . $ADUANASSW . $contrareembolso . $INTERNACIONALSW . "<libroControl></libroControl>" . "<nombre_consignatario>". SEUR()->API->Depurar( $nombre_consigna ) . "</nombre_consignatario>" . "<direccion_consignatario>" . SEUR()->API->Depurar( $direccion_consigna ) . "</direccion_consignatario>" . "<tipoVia_consignatario>CL</tipoVia_consignatario>" . "<tNumVia_consignatario>N</tNumVia_consignatario>" . "<numVia_consignatario>.</numVia_consignatario>" . "<escalera_consignatario>.</escalera_consignatario>" . "<piso_consignatario>.</piso_consignatario>" . "<puerta_consignatario>.</puerta_consignatario>" . "<poblacion_consignatario>" . SEUR()->API->Depurar( $this->pedido->_shipping_city ) . "</poblacion_consignatario>" . "<codPostal_consignatario>".$this->pedido->_shipping_postcode ."</codPostal_consignatario>" . "<email_consignatario>" . SEUR()->API->Depurar($email_consigna) ."</email_consignatario>" . "<sms_consignatario>" . $telef_consigna . "</sms_consignatario>" . "<pais_consignatario>" . $this->pedido->_shipping_country . "</pais_consignatario>" . $B2CSW . $entregasabado . "<telefono_consignatario>". $telef_consigna ."</telefono_consignatario>" . "<atencion_de>". SEUR()->API->Depurar( $this->pedido->_shipping_company ) ."</atencion_de>" . "</bulto>" ; $TotalBultos="" ; $numero_de_bultos = 1 ; while ($numero_de_bultos <= $datos['bultos']) { $numero_de_bultos ++ ; $TotalBultos .= $Bulto ;  } $DatosEnvio = "<?xml version='1.0' encoding='ISO-8859-1'?><root><exp>" . $TotalBultos . "</exp></root>" ; if ( $Opc_servicios['tipo_etiqueta'] == 'TERMICA' ) { $params = array ( 'in0'=>	$Opc_acceso['usuario_cit'] , 'in1'=>	$Opc_acceso['clave_cit'][0] , 'in2'=> "ZEBRA" , 'in3'=> "LP2844-Z" , 'in4'=> "2C" , 'in5'=> $DatosEnvio , 'in6'=> "RL".$Opc_acceso['franquicia'] . $Opc_acceso['codigo_cit']."I.xlm" , 'in7'=>	$Opc_direccion['nif'] , 'in8'=> $Opc_acceso['franquicia'] , 'in9'=> '-1' , 'in10'=> "woocommerce" )  ; try { $cliente = new SoapClient('http://cit.seur.com/CIT-war/services/ImprimirECBWebService?wsdl') ; $respuesta = $cliente->impresionIntegracionConECBWS($params) ; } catch (SoapFault $fault) { $fault->faultcode ; return $this->Soap_fault( $fault->faultcode . ' - ' . $fault->faultstring) ;  } } else { $params = array ( 'in0'=> $Opc_acceso['usuario_cit'] , 'in1'=>	$Opc_acceso['clave_cit'][0] , 'in2'=> $DatosEnvio , 'in3'=> "RL". $Opc_acceso['franquicia'] . $Opc_acceso['codigo_cit']. "I.xlm" , 'in4'=>	$Opc_direccion['nif'] , 'in5'=>	$Opc_acceso['franquicia'] , 'in6'=> '-1' , 'in7'=> "woocommerce" )  ; try { $cliente = new SoapClient('http://cit.seur.com/CIT-war/services/ImprimirECBWebService?wsdl') ; $respuesta = $cliente->impresionIntegracionPDFConECBWS($params) ; } catch (SoapFault $fault) { $fault->faultcode ; return $this->Soap_fault( $fault->faultcode . ' - ' . $fault->faultstring) ;  }  } if ($respuesta->out->mensaje == 'OK') { if ( $Opc_servicios['tipo_etiqueta'] == 'TERMICA' ) { $Seur_envio['etiqueta'] = $respuesta->out->traza ; } else { $Seur_envio['etiqueta'] = $respuesta->out->PDF ;  } $Seur_envio['fecha_creado'] = date('d-m-Y H:i:s', current_time( 'timestamp' )) ; $Seur_envio['creado'] = true ; $Seur_envio['etiqueta_tipo'] = $Opc_servicios['tipo_etiqueta'] ; $datos = $this->pedido->SEUR_envio + $Seur_envio ; if( version_compare( WC_VERSION, '2.7', '<' ) ) update_post_meta($id_pedido, 'SEUR_envio', $datos ) ; else { $this->pedido->update_meta_data( 'SEUR_envio', $datos ) ; $this->pedido->save() ;  } $TS =  ( strtotime ( date('Y-m-d 22:00:s', current_time( 'timestamp' )) ) - current_time( 'timestamp' ) ) + mt_rand(0,600) ; $dUp['type'] = 'Pedido creado y se empieza sincronización.' ; SEUR()->API->setTransient( 'SEUR_UPDATE_'. $id_pedido , $dUp, $TS ) ; return true ; }  else { $xml = str_replace('</erroresEnvio></root>' , '</root>', $respuesta->out->mensaje ) ; $xml =  json_decode(json_encode(simplexml_load_string(iconv( "UTF-8", "ISO-8859-1",	htmlspecialchars_decode ( $xml)))), true) ; SEUR()->log($xml) ; if(isset($xml['errorVal']['codigo'])) { $error = $xml['errorVal']['codigo'] . ' - ' . $xml['errorVal']['descripcion'] ; } else if(isset($xml['errorVal'][0]['codigo'])) { $error = $xml['errorVal'][0]['codigo'] . ' - ' . $xml['errorVal'][0]['descripcion'] ; } else { $error = __('Desconocido','seur') ;  } return SEUR()->API->div_class( __('SEUR COMUNICA: ', 'seur') . $xml['main'] . '</br></br>' . $error  , 'SEUR_Error') ;  } return false ;  } public function URL_to_order( $order_id ) { if ( FALSE === get_post_status( $order_id ) ) { return $order_id ; } else { return '<a  href="' . get_bloginfo('url') . '/wp-admin/post.php?post_type=shop_order&post=' . str_replace( '_', '', $order_id ) . '&action=edit" title="' . __('Ir al pedido.','seur') .'">' . $order_id . '</a>' ;  }  } public function  cod_estado_envio( $SEUR ) { if (isset($SEUR['SITUACIONES']['SITUACION'])) { if( isset($SEUR['SITUACIONES']['SITUACION']['TRANSITO']) ) { return $SEUR['SITUACIONES']['SITUACION']['SITUACION_CRM'] ; } else { return end($SEUR['SITUACIONES']['SITUACION'])['SITUACION_CRM'] ;  } } else if( isset( $SEUR['COD_SITUACION'] )) { return substr( $SEUR['COD_SITUACION'], 2 , 4) ; } else 
return '' ;  } public function Soap_fault($msg = '') { ob_start() ; echo SEUR()->API->div_class(  '</hr>' . $msg == '' ? __('¡ Error en comunicación con SEUR !', 'seur') : $msg . '</hr>' , 'SEUR_Error' ) ; return ob_get_clean() ;  } public function Estado() { if ( false === ( $check = SEUR()->API->getTransient( 'Estado_Plugin' ) ) ) { $check['WC'] = SEUR()->WC_version_check() ; $check['SOAP'] = (extension_loaded('soap') || class_exists('SoapClient')) ; $check['SERVER'] = $this->SEUR_up() ; if ($check['WC'] && $check['SOAP'] && $check['SERVER'] ) $check['ALL'] = true ; else
$check['ALL'] = false ; SEUR()->API->setTransient( 'Estado_Plugin' , $check , 600 ) ;  } return $check ;  } public function SEUR_up( $domain = 'ws.seur.com' ) { $file = fsockopen ($domain, 80, $errno, $errstr, 10) ; if (!$file) { SEUR()->log('SEUR - Se ha encontrado el servidor caido, imposible conectar.') ; return false ; } else { fclose($file) ; return true ;  }  }  } 