<?php
if ( ! defined( 'ABSPATH' ) ) exit ; class SEUR_API { private $name ; public $fechas ; public function __construct( $name_app ) { $this->name = $name_app ; $this->fechas = new fechas() ; return $this ;  } public function get_estado_envio( $order_id ) { global $post ; if( empty( $post->Xtend ) ) { $pedido = SEUR()->API->getOrder($order_id) ; } else { $pedido = $post ;  } if ( version_compare( WC_VERSION, '2.7', '<' ) ) $post_status = $pedido->post_status ; else { if ( method_exists( $pedido, 'get_status' ) ) { $post_status = 'wc-' . $pedido->get_status() ; } else { $post_status = $pedido->post_status ;  }  } if( property_exists( $pedido, 'SEUR' ) && in_array( $post_status ,  SEUR()->API->getOption('woocommerce','estados_ver_seguimiento', array('wc-processing', 'wc-completed' ) ) ) ) return 'hacer_seguimiento' ; if( !property_exists( $pedido, 'SEUR' ) && property_exists( $pedido, 'SEUR_envio' ) && isset($pedido->SEUR_envio['creado'])  && $pedido->SEUR_envio['creado'] ) return 'imprime_etiqueta' ; if( in_array( $post_status ,  SEUR()->API->getOption('woocommerce','estados_crea_envio', array('wc-processing')  ) ) ) { return 'pidiendo_datos' ;  } return 'solo_informar' ;  } public function get_estado_envio_str( $order_id, $En_Estado = null) { $estado = '' ; if($En_Estado == null ) $En_Estado = $this->get_estado_envio($order_id) ; switch($En_Estado) { case 'solo_informar' : $estado .=	__('Sin datos sobre el envío.','seur') ; return $estado ; case 'pidiendo_datos' : $estado .=	'<p class="SEUR_Est_Env">'. __('Esperando paquetería.', 'seur') . '</p>' ; $estado .=	__('Esperando ser empaquetado y enviado.','seur') ; return $estado ; case 'imprime_etiqueta' : $estado .=	'<p class="SEUR_Est_Env">'. __('Envío creado, esperando datos.', 'seur') . '</p>' ; $estado .=	__('Se actualizará en cuanto se reciban datos de SEUR.','seur') ; return $estado ; case 'hacer_seguimiento' : if ( ( $data = get_metadata('post' , $order_id , 'SEUR' , true ) ) === false ) { $estado .=	'<p class="SEUR_Est_Env">'. __('Envío creado, esperando datos.', 'seur') . '</p>' ; $estado .=	__('Se actualizará en cuanto se reciban datos de SEUR.','seur') ; return $estado ; } else { if (isset($data['SITUACIONES']['SITUACION'])) { if( isset($data['SITUACIONES']['SITUACION']['TRANSITO']) ) { $sit = $data['SITUACIONES']['SITUACION'] ; } else { $sit = end($data['SITUACIONES']['SITUACION']) ;  } $estado .=	'<p class="SEUR_Est_Env">'. $sit['DESCRIPCION_CLIENTE'] . '</p>' ; } else { $estado .= 	'<p class="SEUR_Est_Env">'. $data['DESCRIPCION_PARA_CLIENTE'] . '</p>' ;  } return apply_filters( 'SEUR_get_estado_envio' , $estado,  $data, $order_id ) ;  } default : return $estado ;  }  } public function My_DateTime( $date = null ) { if( $date == null ) return new My_DateTime() ; else
return new My_DateTime( $date ) ;  } public function Is_Config_Ok() { if( $this->getOption('config_ok') == false ) { if( $_GET['page'] == 'seur_configuraciones') { SEUR()->adminNotice( _('Por favor, para poder usar el plugin de SEUR debe tener todos los datos de configuración correctamente configurados','seur'), 'error') ; } else { wp_redirect(get_bloginfo('url') . '/wp-admin/admin.php?page=seur_configuraciones&field_errors=1' , 200 ) ;  }  }  } public function div_class($msg,  $css_class = 'SEUR_Info') { return '<div class="' . $css_class . '">' . $msg . '</div>' ;  } public function Get_Options($name = '') { return new SEUR_Options($this->name . $name) ;  } public function Get_Transients($name = '', $timeTrans = 60) { return new SEUR_Transients($name, $timeTrans) ;  } private $Options = null ; public function getOption($ID = null , $field = null, $def = null) { if( $this->Options == null ) $this->Options = $this->Get_Options() ; return $this->Options->getOption( $ID, $field, $def ) ;  } public function deleteOption($ID) { if( $this->Options == null ) $this->Options = $this->Get_Options() ; return $this->Options->deleteOption($ID) ;  } public function updateOption($ID , $value , $field = null , $forzado = false) { if( $this->Options == null ) $this->Options = $this->Get_Options() ; $this->Options->updateOption( $ID , $value , $field , $forzado ) ;  } public function getAllOptions() { if( $this->Options == null ) $this->Options = $this->Get_Options() ; return $this->Options->getAllOptions() ;  } private $Trans = null ; public function getTransient($ID) { if($this->Trans == null ) $this->Trans = $this->Get_Transients() ; return $this->Trans->getTrans($ID) ;  } public function setTransient($ID, $Cont , $interval = null) { if($this->Trans == null ) $this->Trans = $this->Get_Transients() ; return $this->Trans->setTrans($ID, $Cont , $interval) ;  } public function countTransients() { if($this->Trans == null ) $this->Trans = $this->Get_Transients() ; return $this->Trans->countTrans() ;  } public function delTransient($ID) { if($this->Trans == null ) $this->Trans = $this->Get_Transients() ; return $this->Trans->delTrans($ID) ;  } public function delTransAll() { if($this->Trans == null ) $this->Trans = $this->Get_Transients() ; return $this->Trans->delTransAll() ;  } public function countTotalTransients() { global $wpdb, $_wp_using_ext_object_cache ; $Xtrans = $wpdb->get_col( "SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '{$this->name}_Trans%';" ) ; $TotalTrans = 0 ; foreach( $Xtrans as $trans ) { $temp = $this->Get_Transients($trans) ; $TotalTrans += $temp->Count() ;  } $temp = null ; return $TotalTrans ;  } public function delete_transients( $DelExpired = false) { global $wpdb, $_wp_using_ext_object_cache ; $QTrans = $this->countTotalTransients() ; $Xtrans = $wpdb->get_col( "SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '{$this->name}_TRANS_%';" ) ; foreach( $Xtrans as $trans ) { delete_option($trans) ;  } SEUR()->adminNotice( '<b> ' . $QTrans . '</b> ' . __('transitorios de SEUR se han eliminado de la base de datos.','seur'),'updated') ; if($DelExpired) { if( $_wp_using_ext_object_cache ) return ; $time = isset ( $_SERVER['REQUEST_TIME'] ) ? (int)$_SERVER['REQUEST_TIME'] : time() ; $expired = $wpdb->get_col( "SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout%' AND option_value < {$time};" ) ; if(count($expired)>0) { SEUR()->adminNotice( '<b> ' . count($expired) . '</b> ' . __('transitorios expirados se han eliminado de la base de datos.','seur'),'updated') ; foreach( $expired as $transient ) { $key = str_replace('_transient_timeout_', '', $transient) ; delete_transient($key) ;  }  }  }  } private $Taxs ; public function getTax($ID = null, $field = null, $def = null) { return 	$this->Taxs->getOption( $ID, $field, $def ) ;  } public function updateTax($ID , $value , $field = null , $forzado = false) { $this->Taxs->updateOption( $ID , $value , $field, $forzado ) ;  } public function deleteTax($ID) { $this->Taxs->deleteOption($ID) ;  } public function New_Crono() { return new Crono() ;  } public function is_shop_manager($user_id = null) { if ( is_numeric( $user_id ) ) { $user = get_userdata( $user_id ) ; } else { global $current_user ; $user = wp_get_current_user() ;  } if ( isset( $user->roles[0] ) && ( $user->roles[0] == 'shop_manager' || $user->roles[0] == 'administrator')) { return true;    		} else { return false; }  } public function is_seur_manager($user_id = null) { if ( is_numeric( $user_id ) ) { $user = get_userdata( $user_id ) ; } else { global $current_user ; $user = wp_get_current_user() ;  } if ( isset( $user->roles[0] ) && ($user->roles[0] == 'seur_manager' || $user->roles[0] == 'administrator') ) { return true;    		} else { return false; }  } function valida_nif($nif) { $falso = false ; if ( $nif !='' ) { $nif = strtoupper( $nif ) ; for ( $i = 0; $i < 9; $i ++ ) { $num[$i] = substr( $nif, $i, 1 ) ;  } if ( !preg_match( '/((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)/', $nif ) ) { 				$falso = true ;  } if ( preg_match( '/(^[0-9]{8}[A-Z]{1}$)/', $nif ) ) { if ( $num[8] == substr( 'TRWAGMYFPDXBNJZSQVHLCKE', substr( $nif, 0, 8 ) % 23, 1 ) ) { 					$falso = false ;  }  } $suma = $num[2] + $num[4] + $num[6] ; for ( $i = 1; $i < 8; $i += 2 ) { $suma += substr( ( 2 * $num[$i] ), 0, 1 ) + substr( ( 2 * $num[$i] ), 1, 1 ) ;  } $n = 10 - substr( $suma, strlen( $suma ) - 1, 1 ) ; if ( preg_match( '/^[KLM]{1}/', $nif ) ) { 				if ( $num[8] == chr( 64 + $n ) ) { $falso = false ;  }  } if ( preg_match( '/^[ABCDEFGHJNPQRSUVW]{1}/', $nif ) ) { if ( $num[8] == chr( 64 + $n ) || $num[8] == substr( $n, strlen( $n ) - 1, 1 ) ) { 					$falso = false ;  }  } if ( preg_match( '/^[T]{1}/', $nif ) ) { if ( $num[8] == preg_match( '/^[T]{1}[A-Z0-9]{8}$/', $nif ) ) { 					$falso = false ;  }  } if ( preg_match( '/^[XYZ]{1}/', $nif ) ) { 				if ( $num[8] == substr( 'TRWAGMYFPDXBNJZSQVHLCKE', substr( str_replace( array( 'X','Y','Z' ), array( '0','1','2' ), $nif ), 0, 8 ) % 23, 1 ) ) { $falso = false ;  }  }  } if ( $falso ) return false ; else
return true ;  } public function valida_email ( $email) { if( !filter_var($email, FILTER_VALIDATE_EMAIL) === false ) { $domain = explode('@', $email) ; if ( checkdnsrr( $domain[1] ) ) return true ;  } return false ;  } public function getBrowser($user_agent = null) { if($user_agent == null ) $user_agent = $_SERVER['HTTP_USER_AGENT'] ; if(strpos($user_agent, 'Maxthon') !== FALSE ) return "Maxthon" ; elseif(strpos($user_agent, 'SeaMonkey') !== FALSE ) return "SeaMonkey" ; elseif(strpos($user_agent, 'Vivaldi') !== FALSE ) return "Vivaldi" ; elseif(strpos($user_agent, 'Arora') !== FALSE ) return "Arora" ; elseif(strpos($user_agent, 'Avant Browser') !== FALSE ) return "Avant Browser" ; elseif(strpos($user_agent, 'Beamrise') !== FALSE ) return "Beamrise" ; elseif(strpos($user_agent, 'Epiphany') !== FALSE ) return 'Epiphany' ; elseif(strpos($user_agent, 'Chromium') !== FALSE ) return 'Chromium' ; elseif(strpos($user_agent, 'Iceweasel') !== FALSE ) return 'Iceweasel' ; elseif(strpos($user_agent, 'Galeon') !== FALSE ) return 'Galeon' ; elseif(strpos($user_agent, 'Edge') !== FALSE ) return 'Microsoft Edge' ; elseif(strpos($user_agent, 'Trident') !== FALSE) 			return 'Internet Explorer' ; elseif(strpos($user_agent, 'MSIE') !== FALSE ) return 'Internet Explorer' ; elseif(strpos($user_agent, 'Opera Mini') !== FALSE ) return "Opera Mini" ; elseif(strpos($user_agent, 'Opera') || strpos($user_agent, 'OPR') !== FALSE ) return "Opera" ; elseif(strpos($user_agent, 'Firefox') !== FALSE ) return 'Mozilla Firefox' ; elseif(strpos($user_agent, 'Chrome') !== FALSE ) return 'Google Chrome' ; elseif(strpos($user_agent, 'Safari') !== FALSE ) return "Safari" ; elseif(strpos($user_agent, 'iTunes') !== FALSE ) return 'iTunes' ; elseif(strpos($user_agent, 'Konqueror') !== FALSE ) return 'Konqueror' ; elseif(strpos($user_agent, 'Dillo') !== FALSE ) return 'Dillo' ; elseif(strpos($user_agent, 'Netscape') !== FALSE ) return 'Netscape' ; elseif(strpos($user_agent, 'Midori') !== FALSE ) return 'Midori' ; elseif(strpos($user_agent, 'ELinks') !== FALSE ) return 'ELinks' ; elseif(strpos($user_agent, 'Links') !== FALSE ) return 'Links' ; elseif(strpos($user_agent, 'Lynx') !== FALSE ) return 'Lynx' ; elseif(strpos($user_agent, 'w3m') !== FALSE ) return 'w3m' ; else
return false ;  } public function getPlatform($user_agent = null) { if($user_agent == null ) $user_agent = $_SERVER['HTTP_USER_AGENT'] ; if(strpos($user_agent, 'Windows NT 10.0') !== FALSE ) return "Windows 10" ; elseif(strpos($user_agent, 'Windows NT 6.3') !== FALSE ) return "Windows 8.1" ; elseif(strpos($user_agent, 'Windows NT 6.2') !== FALSE ) return "Windows 8" ; elseif(strpos($user_agent, 'Windows NT 6.1') !== FALSE ) return "Windows 7" ; elseif(strpos($user_agent, 'Windows NT 6.0') !== FALSE ) return "Windows Vista" ; elseif(strpos($user_agent, 'Windows NT 5.1') !== FALSE ) return "Windows XP" ; elseif(strpos($user_agent, 'Windows NT 5.2') !== FALSE ) return 'Windows 2003' ; elseif(strpos($user_agent, 'Windows NT 5.0') !== FALSE ) return 'Windows 2000' ; elseif(strpos($user_agent, 'Windows ME') !== FALSE ) return 'Windows ME' ; elseif(strpos($user_agent, 'Win98') !== FALSE ) return 'Windows 98' ; elseif(strpos($user_agent, 'Win95') !== FALSE ) return 'Windows 95' ; elseif(strpos($user_agent, 'WinNT4.0') !== FALSE ) return 'Windows NT 4.0' ; elseif(strpos($user_agent, 'Windows Phone') !== FALSE ) return 'Windows Phone' ; elseif(strpos($user_agent, 'Windows') !== FALSE ) return 'Windows' ; elseif(strpos($user_agent, 'iPhone') !== FALSE ) return 'iPhone' ; elseif(strpos($user_agent, 'iPad') !== FALSE ) return 'iPad' ; elseif(strpos($user_agent, 'Debian') !== FALSE ) return 'Debian' ; elseif(strpos($user_agent, 'Ubuntu') !== FALSE ) return 'Ubuntu' ; elseif(strpos($user_agent, 'Slackware') !== FALSE ) return 'Slackware' ; elseif(strpos($user_agent, 'Linux Mint') !== FALSE ) return 'Linux Mint' ; elseif(strpos($user_agent, 'Gentoo') !== FALSE ) return 'Gentoo' ; elseif(strpos($user_agent, 'Elementary OS') !== FALSE ) return 'ELementary OS' ; elseif(strpos($user_agent, 'Fedora') !== FALSE ) return 'Fedora' ; elseif(strpos($user_agent, 'Kubuntu') !== FALSE ) return 'Kubuntu' ; elseif(strpos($user_agent, 'Android') !== FALSE ) return 'Android' ; elseif(strpos($user_agent, 'Linux') !== FALSE ) return 'Linux' ; elseif(strpos($user_agent, 'FreeBSD') !== FALSE ) return 'FreeBSD' ; elseif(strpos($user_agent, 'OpenBSD') !== FALSE ) return 'OpenBSD' ; elseif(strpos($user_agent, 'NetBSD') !== FALSE ) return 'NetBSD' ; elseif(strpos($user_agent, 'SunOS') !== FALSE ) return 'Solaris' ; elseif(strpos($user_agent, 'BlackBerry') !== FALSE ) return 'BlackBerry' ; elseif(strpos($user_agent, 'Mobile') !== FALSE ) return 'Firefox OS' ; elseif(strpos($user_agent, 'Mac OS X+') || strpos($user_agent, 'CFNetwork+') !== FALSE ) return 'Mac OS X' ; elseif(strpos($user_agent, 'Macintosh') !== FALSE ) return 'Mac OS Classic' ; elseif(strpos($user_agent, 'OS/2') !== FALSE ) return 'OS/2' ; elseif(strpos($user_agent, 'BeOS') !== FALSE ) return 'BeOS' ; elseif(strpos($user_agent, 'Nintendo') !== FALSE ) return 'Nintendo' ; else
return 'Unknown Platform' ;  } public function Porcent($Cifra1, $Cifra2) { if ($Cifra1 == 0 ) return  0 ; else
return (($Cifra1 - $Cifra2) / $Cifra1 ) * 100 ;  } public function Porcent_str($Cifra1, $Cifra2, $dec = 1, $Str = '%') { return number_format($this->Porcent($Cifra1, $Cifra2), $dec) . $Str ;  } public function arrayDiff ($a1, $a2) { $r = true ; foreach($a1 as $k => $v) { $r[$k] = is_array($v) ? $this->arrayDiff($a1[$k], $a2[$k]) : array_diff_key($a1, $a2) ; if($a1[$k] !== $a2[$k]) $r[$k] = $v ;  } return $r ;  } public function get_cantidad_envios ( $estado = '' ) { global $wpdb ; $db_prefix = $wpdb->prefix ; $sql = "SELECT SQL_CALC_FOUND_ROWS {$db_prefix}posts.ID
FROM {$db_prefix}posts 
WHERE 1=1 
AND {$db_prefix}posts.post_type = 'shop_order'
AND (({$db_prefix}posts.post_status = 'wc-{$estado}'))" ;  } public function getOrders( $order_statuses = null , $fecha_ini = null , $fecha_fin = null) { global $wpdb ; $db_prefix = $wpdb->prefix ; if(!$order_statuses) $order_statuses =	array_keys( wc_get_order_statuses()) ; $sql = "SELECT {$db_prefix}posts.* 
FROM {$db_prefix}posts
INNER JOIN {$db_prefix}postmeta ON ( {$db_prefix}posts.ID = {$db_prefix}postmeta.post_id ) WHERE 1=1
" ; if( $fecha_ini || $fecha_fin) { $sql .= " 
AND ( ( " ; if( $fecha_ini ) $sql .= "{$db_prefix}posts.post_date >= '{$fecha_ini}'" ; if( $fecha_ini || $fecha_fin ) $sql .= " AND {$db_prefix}posts.post_date <= '{$fecha_fin}'" ; else
$sql .= " {$db_prefix}posts.post_date <= '{$fecha_fin}'" ; $sql .= " ) )" ;  } $sql .="
AND {$db_prefix}posts.post_type = 'shop_order' 
AND ( (" ; $first=true ; foreach($order_statuses as $status) { if($first) { $first = false ; $sql .= "{$db_prefix}posts.post_status = '{$status}'" ; } else { $sql .= " OR {$db_prefix}posts.post_status = '{$status}'" ;  }  } $sql .=			" )  ) GROUP BY { $db_prefix}posts.ID 
ORDER BY { $db_prefix}posts.post_date ASC" ; $orders = $wpdb->get_results($sql) ; foreach ($orders as $order) { $order = $this->getOrder($order->ID) ;  } return $orders ;  } public function getOrdersSEUR( $fecha_ini = null , $fecha_fin = null) { global $wpdb ; $db_prefix = $wpdb->prefix ; $order_statuses = $this->getOption(	'woocommerce',																'estados_sincroniza', 														array('0' => 'wc-processing')												) ; $sql = "SELECT {$db_prefix}posts.* 
FROM {$db_prefix}posts
INNER JOIN {$db_prefix}postmeta ON ( {$db_prefix}posts.ID = {$db_prefix}postmeta.post_id ) WHERE 1=1 " ; if( $fecha_ini || $fecha_fin) { $sql .= " AND ((" ; if( $fecha_ini ) $sql .= "{$db_prefix}posts.post_date >= '{$fecha_ini}'" ; if( $fecha_ini || $fecha_fin ) $sql .= " AND {$db_prefix}posts.post_date <= '{$fecha_fin}'" ; else
$sql .= " {$db_prefix}posts.post_date <= '{$fecha_fin}'" ; $sql .= " )) " ;  } $sql .=" AND {$db_prefix}posts.post_type = 'shop_order'	" ; $sql .=" AND (( " ; $first=true ; foreach( $order_statuses  as $status) { if($first) { $first = false ; $sql .= "{$db_prefix}posts.post_status = '{$status}'" ; } else { $sql .= " OR {$db_prefix}posts.post_status = '{$status}'" ;  }  } $sql .=	 " )) " ; $sql .=	 " GROUP BY {$db_prefix}posts.ID ORDER BY {$db_prefix}posts.post_date ASC" ; return $wpdb->get_results($sql) ;  } public function getOrder($ID) { $order = new WC_Order($ID) ; $this->getMetas($order) ; $order->shipping_method  = maybe_unserialize($order->get_shipping_methods()) ; return $order ;  } public function getMetas (&$order) { global $wpdb ; if ( version_compare( WC_VERSION, '2.7', '<' ) ) $order_id = $order->post->ID ; else
$order_id = $order->get_id() ; $sql = "SELECT post_id, meta_key, meta_value FROM {$wpdb->prefix}postmeta WHERE post_id IN ({$order_id}) ORDER BY meta_id ASC" ; foreach($wpdb->get_results($sql) as $meta ) { $key = $meta->meta_key ; $order->$key = maybe_unserialize($meta->meta_value) ;  }  } function Depurar($entrada) { return str_replace ( array("<", ">" ,"/", "\"", "'", "?", "¿"  ), " " , str_replace ("&", "-" , str_replace ("Ú", "U" , str_replace ("Ó", "O" , str_replace ("Í", "I" , str_replace ("É", "E" , str_replace ("Á", "A" , $entrada )  )  )  )  )  ) ) ;  } public function TimeExpired($Ini, $Fin = null) { if($Fin === null ) $Fin = current_time('timestamp') ; if(((int)$Ini - (int)$Fin) <= 0 ) return true ; else
return false ;  } public function Is_European($cod_pais ) { $UE = array ( 'AT', 						'BE', 						'BG', 						'CY', 						'CZ', 						'DE', 						'DK', 						'EE', 						'ES', 						'FI', 						'FR', 						'GB', 						'GR', 						'HU', 						'HR', 						'IE', 						'IT', 						'LT', 						'LU', 						'LV', 						'MT', 						'NL', 						'PL', 						'PT', 						'RO', 						'SE', 						'SI', 						'SK' 					) ; return in_array($cod_pais, $UE) ;  }  } class SEUR_Options { private $Options ; private $nameOpt ; private $OptClass ; private $UpdateToEnd = false ; public function __construct( $OptName ) { $this->nameOpt = $OptName ; $this->Options = get_option($this->nameOpt, array() ) ; add_action( 'shutdown', array( $this, 'Xtend_save_options' ), 9999) ;  } public function Xtend_save_options() { if($this->UpdateToEnd) { update_option($this->nameOpt, $this->Options) ;  }  } public function getOption($ID , $field = null, $def = null) { if( !$ID == null && $field == null ) { if (isset($this->Options[$ID])) { return $this->Options[$ID] ; } else if (!$def == null) { $this->Options[$ID] = $def ; $this->updateOptions() ; return $def ;  } }  else	if ( !$ID == null && !$field == null) { if (isset($this->Options[$ID][$field])) { return $this->Options[$ID][$field] ; } else if (!$def == null) { $this->Options[$ID][$field] = $def ; $this->updateOptions() ; return $def ;  }  } return false ;  } public function getAllOptions() { return $this->Options ;  } public function deleteOption($ID, $forzado = false) { unset($this->Options[$ID]) ; $this->updateOptions($forzado) ;  } public function deleteALL( $forzado = false) { $this->Options = array() ; $this->updateOptions( $forzado ) ;  } public function Count() { return count($this->Options) ;  } public function updateOption($ID , $value , $field = null , $forzado = false) { if( $field != null) { $this->Options[$ID][$field] = $value ; } else
$this->Options[$ID] = $value ; $this->updateOptions($forzado) ;  } public function updateOptions( $forzado=false ) { if( $forzado == false) { $this->UpdateToEnd = true ; } else { update_option($this->nameOpt, $this->Options) ;  }  }  } class SEUR_Transients { private $Trans = null ; private $TimeAct ; private $nameTrans ; private $UpdateToEnd = false ; public function __construct( $Name = '' , $seconds = null, $App = 'SEUR_SUGO') { if($Name != '' ) $this->nameTrans = $App . "_TRANS_". $Name ; else
$this->nameTrans = $App . "_TRANS" ; $this->Trans = get_option( $this->nameTrans, array() ) ; if(!is_null($seconds) ) $this->TimeAct = $seconds ; else
$this->TimeAct = 30 ; add_action( 'shutdown', array( $this, 'save_transients'), 9999) ;  } public function save_transients() { $recolecta = false ; if( $this->getTrans('recolecta_basura') === false ) { foreach($this->Trans as $key => $trans) { if (isset($trans['duration']) && false !==  $this->TimeExpired($trans['timeSet'] + $trans['duration'])) { unset($this->Trans[$key]) ; $recolecta = true ;  }  } if($recolecta) { $this->setTrans('recolecta_basura', 'Recolección de basura, borrar transitorios expirados.' , (1 * HOUR_IN_SECONDS) ) ; $this->UpdateToEnd = true ;  }  } if( $this->UpdateToEnd ) { update_option($this->nameTrans, $this->Trans, false) ;  }  } public function setTime($seconds) { $this->TimeAct = $seconds ;  } public function getTime() { return $this->TimeAct ;  } public function name() { return $this->nameTrans ;  } public function getTrans($ID, $modif = null, $dura = null ) { if ( isset($this->Trans[$ID]) ) { $Xpired = ($modif !== null) ? $this->TimeExpired($this->Trans[$ID]['timeSet'], $modif) : null ; if( $Xpired == null ) $Xpired =  $this->TimeExpired( $this->Trans[$ID]['timeSet'] + $this->Trans[$ID]['duration']) ; if ( !$Xpired ) return $this->Trans[$ID]['content'] ;  } return false ;  } public function setTrans($ID, $Cont , $interval = null) { $transSet = array() ; $transSet['timeSet'] = current_time('timestamp') ; if($interval == null ) $transSet['duration'] = $this->TimeAct ; else
$transSet['duration'] = $interval ; $transSet['creado'] =	date('H:i:s d-m-Y ' , current_time('timestamp') ) ; $transSet['expira'] =	date('H:i:s d-m-Y ' , (current_time('timestamp') + $transSet['duration'] )) ; $transSet['content'] = $Cont ; $this->Trans[$ID] = $transSet ; $this->UpdateToEnd = true ; return true ;  } public function countTrans() { return count($this->Trans) ;  } public function delTrans($ID) { unset($this->Trans[$ID]) ; $this->UpdateToEnd = true ;  } public function delTransAll() { $this->Trans = array() ; $this->UpdateToEnd = true ;  } public function TimeExpired($Ini, $Fin = null) { if($Fin === null ) $Fin = current_time('timestamp') ; if(((int)$Ini - (int)$Fin) <= 0 ) return true ; else
return false ;  }  } class fechas { public function __construct() { return $this ;  } public function primerDiaMes($fecha, $format='Y-m-d') { $fecha= strtotime($fecha); 		$d = date("d",$fecha); 		$m = date("m",$fecha); 		$Y = date("Y",$fecha); 		$primerDia = date($format, mktime(0, 0, 0,$m, $d-$d +1,$Y)); 		return $primerDia; } public function UltimoDiaMes($fecha, $format='Y-m-d') { $fecha= strtotime($fecha); 		$d = date("d",$fecha); 		$m = date("m",$fecha); 		$Y = date("Y",$fecha); 		$ultimoDia = date($format, mktime(0, 0, 0, $m+1, $d-$d, $Y)); 		return $ultimoDia; } public function Dia_str($date = null) { if ($date==null) $date = date(current_time( 'timestamp' )) ; if($this->CodLang == 'es_ES') { $dia_str = array("","Lunes","Martes","Miercoles","Jueves","Viernes","Sábado","Domingo") ; return $dia_str[date('N', $date)] ; } else { return date('L', $date) ;  }  } public function Mes_str($mes = null) { if ($mes == null || is_array($mes)) $mes = (int)date('m',current_time( 'timestamp' )) ; if($this->CodLang == 'es_ES') { $mes_str = array("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre") ; return $mes_str[$mes - 1] ; } else { return date('F', mktime(0, 0, 0,$mes ,1 ,date("Y",current_time( 'timestamp' )))) ;  }  } public function TimeExpired($Ini, $Fin = null) { if($Fin === null ) $Fin = current_time('timestamp') ; if(((int)$Ini - (int)$Fin) <= 0 ) return true ; else
return false ;  }  } Class Crono { var $comienzo ; public function __construct() { $this->comienzo = $this->getMicrotime() ; return true ;  } function get($formatear = false, $nroDecimales = 0) { $tiempo = $this->getMicrotime() - $this->comienzo ; return ( $formatear ) ? number_format( $tiempo, $nroDecimales, ',', '.') : $tiempo ;  } function reset() { $this->comienzo = $this->getMicrotime() ;  } function getMicrotime() { list($milisegundos, $segundos) = explode(" ", microtime()) ; return ( (float) $milisegundos + (float) $segundos ) ;  }  } class My_DateTime extends DateTime { public function __toString() { $dia_str = array("","Lunes","Martes","Miercoles","Jueves","Viernes","Sábado","Domingo") ; $mes_str = array("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre") ; return  $dia_str[$this->format('N')] . ', ' . $this->format('d') . ' de ' . $mes_str[$this->format('m') - 1] . ' ' . $this->format('Y') ;  } public function Fecha() { return $this->format('d-m-Y') ;  }  } 