<?php
class SEUR_recogidas { public $sClassName = 'SEUR_admin' ; public $sPageSlug   = 'seur_recogidas' ; public $sTabSecID    = 'ordena_recogida' ; public function __construct( $sClassName='', $sPageSlug='', $sTabSecID='' ) { $this->sClassName   = $sClassName ? $sClassName : $this->sClassName ; $this->sPageSlug    = $sPageSlug ? $sPageSlug : $this->sPageSlug ; $this->sTabSecID     = $sTabSecID ? $sTabSecID : $this->sTabSecID ; add_action( 'load_' . $this->sPageSlug, array( $this, 'Load_Event' ) ) ; add_action( 'do_' . $this->sPageSlug , array( $this, 'Do_Event' ) ) ; return $this ;  } public function Load_Event( $oAdminPage ) { SEUR()->API->Is_Config_Ok() ; if( SEUR()->API->getOption($this->sTabSecID, 'fecha') == date('Y-m-d', current_time( 'timestamp' )) ) { $oAdminPage->addSettingSections( $this->sPageSlug , array ( 'section_id'    	=>  $this->sTabSecID , 'section_tab_slug'  => 'tabbed_recogida_1' , 'title'        		=>  __( 'Ordenar una recogida.', 'seur' ) ,  ) ) ; $oAdminPage->addSettingFields(	$this->sTabSecID , array ( 'field_id'      => 'result' , 'type'          => 'html' , 'title'         => __( 'Estado de la recogida:', 'seur' ) , 'value'			=> SEUR()->SOAP->ConsultaRecogidas_str(SEUR()->API->getOption($this->sTabSecID, 'seur_id_recogida')) , 'width' 		=> '100%' , ) , array ( 'field_id'      => 'cancela_recogida' , 'type'          => 'submit' , 'label'         => __( 'Anular recogida', 'seur' ) , 'save' 			=> false ,  ) ) ; } else { $oAdminPage->addSettingSections( $this->sPageSlug , array ( 'section_id'    	=>  $this->sTabSecID ,       					'section_tab_slug'  => 'tabbed_recogida_1' , 'title'        		=>  __( 'Ordenar una recogida.', 'seur' ) , 'description'  		=> 	__( 'Introduzca un horario para la Recogida, formato HH:MM','seur') . '<br>' . __( 'Si el horario es sólo de Mañanas deje vacios los horarios de Tarde.','seur') . '<br>' . __( 'Si el horario es sólo de Tardes deje vacios los horarios de Mañana.','seur') . '<br>' . __( 'El margen mínimo entre cada horario es de 2 horas.', 'seur' ) . '<hr>' ) ) ; $oAdminPage->addSettingFields(	$this->sTabSecID , array ( 'field_id'      => 'bultos' , 'title'         => __( 'Bultos', 'seur' ) , 'type'          => 'number' , 'default'	=> 1 , 'attributes'    => array ( 'min'   => 1 , 'step'  => 1 , ) , ) , array ( 'field_id'      => 'kilos' , 'title'         => __( 'Kilos', 'seur' ) , 'type'          => 'number' , 'default'		=> 1 , 'attributes'    => array ( 'min'   => 1 , 'step'  => 0.01 , ) , 'description'	=> '<hr>' )  , array ( 'field_id'      => 'maniana' , 'title'         => __( 'Mañana', 'seur' ) , 'type'          => 'text' , 'label'			=> __('Desde:','seur') , 'default'		=> SEUR()->API->getOption('recogidas','maniana_def' )[0] , array ( 'type'          => 'text' , 'label'	=> __('Hasta:','seur') , 'default'		=> SEUR()->API->getOption('recogidas','maniana_def' )[1] , ) , 'description'	=>	__('Horario de recogida por las mañanas, desde qué hora hasta qué hora, formato 24h, por ejemplo 11:00 a 14:15.','seur')  . '<hr>' )  , array ( 'field_id'      => 'tarde' , 'title'         => __( 'Tarde', 'seur' ) , 'type'          => 'text' , 'label'	=> __('Desde:','seur') , 'default'		=> SEUR()->API->getOption('recogidas', 'tarde_def' )[0] , array ( 'type'          => 'text' , 'label'	=> __('Hasta:','seur') , 'default'		=> SEUR()->API->getOption('recogidas','tarde_def' )[1] , ) , 'description'	=>	__('Horario de recogida por las tardes, desde qué hora hasta qué hora, formato 24h, por ejemplo 16:00 a 18:45.','seur') . '<hr>' )  , array ( 'field_id'      => 'tipo' , 'title'         => __( 'Tipo', 'seur' ) , 'type'          => 'select' , 'is_multiple'   => false , 'label'         => array('normal' => 'Normal', 'frio' => 'Frio') , 'default'		=> 'normal' , 'description'	=> __('Indique el tipo de recogida que se realizará.','seur'). '<hr>' )  , array ( 'field_id'      => 'nota_cliente' , 'title'         => __( 'Nota', 'seur' ) , 'type'          => 'textarea' , 'default'		=>  '' , 'description'	=> __('Alguna nota especial para la recogida.','seur'). '<hr>' )  , array ( 'field_id'      => 'submit' , 'type'          => 'submit' , 'label'         => __( 'Ordenar recogida', 'seur' ) , 'save' 			=> false , ) , array ( 'field_id'      => 'result' , 'type'          => 'html' , 'title'         => __( 'Estado de la recogida:', 'seur' ) , 'value'		=> SEUR()->API->div_class (__( 'Rellene los datos para ordenar una recogida.', 'seur')) , 'width' => '100%' ,  ) ) ; do_action ( 'SEUR_add_tabs_recogidas' , $oAdminPage ) ;  } add_filter( 'validation_' . $this->sPageSlug, array( $this, 'Validate' ), 10, 3  ) ;  } public function Do_Event ($content) { return  $content ;  } public function Validate( $aInput, $aOldInput, $oFactory) { $_fIsValid = true ; $_aErrors = array() ; $_return_old_inputs = false ; $rev_campos ='' ; $data = $aInput['ordena_recogida'] ; if(isset($data['cancela_recogida'])) { $Anular = SEUR()->SOAP->anularRecogida_str($data['seur_id_recogida']) ; $oFactory->setSettingNotice( SEUR()->API->div_class ( $Anular['MSG'] ,  'SEUR_Error' ) ) ; $aInput['ordena_recogida'] = array() ; $aInput['ordena_recogida']['result'] = $Anular['MSG'] . '<br/>ID:' . $data['seur_id_recogida'] ; } else { if($data['bultos'] == '') { $_aErrors['ordena_recogida']['bultos'] = __( 'Es encesario saber número de bultos para la recogida, ponga un minimo de 1 bulto para poder ordenar la recogida.', 'seur' ) ; $rev_campos .= '<br>Bultos - El campo de bultos no puede estar vacío.' ; $_fIsValid = false ; $aInput['ordena_recogida']['bultos'] = 1 ;  } if($data['kilos'] == '') { $_aErrors['ordena_recogida']['kilos'] = __( 'Es encesario saber el peso de la recogida, ponga el peso lo más exacto que pueda conseguir por favor.', 'seur' ) ; $rev_campos .= '<br>Kilos - El campo de Kilos no puede estar vacío.' ; $_fIsValid = false ; $aInput['ordena_recogida']['kilos'] = 1 ;  } if	( ($data['maniana'][1] == '' && $data['maniana'][0] == '') && ($data['tarde'][1] == '' && $data['tarde'][0] == '')) { $rev_campos .= '<br>Horarios - Por favor, ponga un horario de mañana o tarde en horario comercial, con un mínimo de 2 horas de margen para que podamos pasar a recoger.' ; $_fIsValid = false ;  } if	( ($data['maniana'][1] != '' && $data['maniana'][0] != '') && (strtotime($data['maniana'][1]) - strtotime($data['maniana'][0]) ) < 7200 ) { $rev_campos .= '<br>Horarios - El horario de recogida de mañana tiene que tener un margen de al menos dos horas.' ; $_fIsValid = false ;  } if	( ($data['tarde'][1] != '' && $data['tarde'][0] != '') && (strtotime($data['tarde'][1]) - strtotime($data['tarde'][0]) ) < 7200 ) { $rev_campos .= '<br>Horarios - El horario de recogida de tarde tiene que tener un margen de al menos dos horas.' ; $_fIsValid = false ;  } if( $_fIsValid && $data['fecha'] != date('Y-m-d', current_time( 'timestamp' )) ) { $fecha = date('Y-m-d', current_time( 'timestamp' )) ; $Recogida = SEUR()->SOAP->CrearRecogida_str( $data['maniana'][0], $data['maniana'][1], $data['tarde'][0], $data['tarde'][1], $data['kilos'], $data['bultos'], $fecha , $data['tipo'], $data['nota_cliente']) ; if ( $Recogida['LOCALIZADOR'] !== '' ) { $aInput['ordena_recogida']['fecha'] = $fecha ; $aInput['ordena_recogida']['seur_id_recogida'] = $Recogida['LOCALIZADOR'] ; $aInput['ordena_recogida']['seur_num_recogida'] = $Recogida['NUM_RECOGIDA'] ; $aInput['ordena_recogida']['seur_valor_recogida'] = $Recogida['TASACION'] ; $oFactory->setSettingNotice( SEUR()->API->div_class ( $Recogida['MSG'] ) ) ; } else { $aInput['ordena_recogida']['fecha'] = '' ; $aInput['ordena_recogida']['seur_id_recogida'] = '' ; $aInput['ordena_recogida']['seur_num_recogida'] = '' ; $aInput['ordena_recogida']['seur_valor_recogida'] = '' ; $oFactory->setSettingNotice( SEUR()->API->div_class ( $Recogida['MSG'], 'SEUR_Error' )) ;  }  }  } if ( !$_fIsValid ) { $oFactory->setFieldErrors( $_aErrors ) ; $oFactory->setSettingNotice( SEUR()->API->div_class ( __( 'Se han producido errores en la introducción de datos, por favor, revise los datos introducidos en:', 'seur' ) ) . $rev_campos ,  'SEUR_Error' ) ; if($_return_old_inputs) return $aOldInput ;  } return $aInput ;  }  } new SEUR_recogidas() ; ?>
